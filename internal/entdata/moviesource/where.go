// Code generated by entc, DO NOT EDIT.

package moviesource

import (
	"yola/internal/entdata/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// MangaSerieSearchURL applies equality check predicate on the "manga_serie_search_url" field. It's identical to MangaSerieSearchURLEQ.
func MangaSerieSearchURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaFilmSearchURL applies equality check predicate on the "manga_film_search_url" field. It's identical to MangaFilmSearchURLEQ.
func MangaFilmSearchURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaFilmSearchURL), v))
	})
}

// SerieSearchURL applies equality check predicate on the "serie_search_url" field. It's identical to SerieSearchURLEQ.
func SerieSearchURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerieSearchURL), v))
	})
}

// FilmSearchURL applies equality check predicate on the "film_search_url" field. It's identical to FilmSearchURLEQ.
func FilmSearchURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilmSearchURL), v))
	})
}

// MangaSerieLatestURL applies equality check predicate on the "manga_serie_latest_url" field. It's identical to MangaSerieLatestURLEQ.
func MangaSerieLatestURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaFilmLatestURL applies equality check predicate on the "manga_film_latest_url" field. It's identical to MangaFilmLatestURLEQ.
func MangaFilmLatestURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaFilmLatestURL), v))
	})
}

// SerieLatestURL applies equality check predicate on the "serie_latest_url" field. It's identical to SerieLatestURLEQ.
func SerieLatestURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerieLatestURL), v))
	})
}

// FilmLatestURL applies equality check predicate on the "film_latest_url" field. It's identical to FilmLatestURLEQ.
func FilmLatestURL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilmLatestURL), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// MangaSerieSearchURLEQ applies the EQ predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLNEQ applies the NEQ predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLIn applies the In predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMangaSerieSearchURL), v...))
	})
}

// MangaSerieSearchURLNotIn applies the NotIn predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMangaSerieSearchURL), v...))
	})
}

// MangaSerieSearchURLGT applies the GT predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLGTE applies the GTE predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLLT applies the LT predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLLTE applies the LTE predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLContains applies the Contains predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLHasPrefix applies the HasPrefix predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLHasSuffix applies the HasSuffix predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLIsNil applies the IsNil predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaSerieSearchURL)))
	})
}

// MangaSerieSearchURLNotNil applies the NotNil predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaSerieSearchURL)))
	})
}

// MangaSerieSearchURLEqualFold applies the EqualFold predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaSerieSearchURLContainsFold applies the ContainsFold predicate on the "manga_serie_search_url" field.
func MangaSerieSearchURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMangaSerieSearchURL), v))
	})
}

// MangaFilmSearchURLEQ applies the EQ predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLNEQ applies the NEQ predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLIn applies the In predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMangaFilmSearchURL), v...))
	})
}

// MangaFilmSearchURLNotIn applies the NotIn predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMangaFilmSearchURL), v...))
	})
}

// MangaFilmSearchURLGT applies the GT predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLGTE applies the GTE predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLLT applies the LT predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLLTE applies the LTE predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLContains applies the Contains predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLHasPrefix applies the HasPrefix predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLHasSuffix applies the HasSuffix predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLIsNil applies the IsNil predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaFilmSearchURL)))
	})
}

// MangaFilmSearchURLNotNil applies the NotNil predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaFilmSearchURL)))
	})
}

// MangaFilmSearchURLEqualFold applies the EqualFold predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMangaFilmSearchURL), v))
	})
}

// MangaFilmSearchURLContainsFold applies the ContainsFold predicate on the "manga_film_search_url" field.
func MangaFilmSearchURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMangaFilmSearchURL), v))
	})
}

// SerieSearchURLEQ applies the EQ predicate on the "serie_search_url" field.
func SerieSearchURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLNEQ applies the NEQ predicate on the "serie_search_url" field.
func SerieSearchURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLIn applies the In predicate on the "serie_search_url" field.
func SerieSearchURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSerieSearchURL), v...))
	})
}

// SerieSearchURLNotIn applies the NotIn predicate on the "serie_search_url" field.
func SerieSearchURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSerieSearchURL), v...))
	})
}

// SerieSearchURLGT applies the GT predicate on the "serie_search_url" field.
func SerieSearchURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLGTE applies the GTE predicate on the "serie_search_url" field.
func SerieSearchURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLLT applies the LT predicate on the "serie_search_url" field.
func SerieSearchURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLLTE applies the LTE predicate on the "serie_search_url" field.
func SerieSearchURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLContains applies the Contains predicate on the "serie_search_url" field.
func SerieSearchURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLHasPrefix applies the HasPrefix predicate on the "serie_search_url" field.
func SerieSearchURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLHasSuffix applies the HasSuffix predicate on the "serie_search_url" field.
func SerieSearchURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLIsNil applies the IsNil predicate on the "serie_search_url" field.
func SerieSearchURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerieSearchURL)))
	})
}

// SerieSearchURLNotNil applies the NotNil predicate on the "serie_search_url" field.
func SerieSearchURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerieSearchURL)))
	})
}

// SerieSearchURLEqualFold applies the EqualFold predicate on the "serie_search_url" field.
func SerieSearchURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerieSearchURL), v))
	})
}

// SerieSearchURLContainsFold applies the ContainsFold predicate on the "serie_search_url" field.
func SerieSearchURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerieSearchURL), v))
	})
}

// FilmSearchURLEQ applies the EQ predicate on the "film_search_url" field.
func FilmSearchURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLNEQ applies the NEQ predicate on the "film_search_url" field.
func FilmSearchURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLIn applies the In predicate on the "film_search_url" field.
func FilmSearchURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilmSearchURL), v...))
	})
}

// FilmSearchURLNotIn applies the NotIn predicate on the "film_search_url" field.
func FilmSearchURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilmSearchURL), v...))
	})
}

// FilmSearchURLGT applies the GT predicate on the "film_search_url" field.
func FilmSearchURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLGTE applies the GTE predicate on the "film_search_url" field.
func FilmSearchURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLLT applies the LT predicate on the "film_search_url" field.
func FilmSearchURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLLTE applies the LTE predicate on the "film_search_url" field.
func FilmSearchURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLContains applies the Contains predicate on the "film_search_url" field.
func FilmSearchURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLHasPrefix applies the HasPrefix predicate on the "film_search_url" field.
func FilmSearchURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLHasSuffix applies the HasSuffix predicate on the "film_search_url" field.
func FilmSearchURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLIsNil applies the IsNil predicate on the "film_search_url" field.
func FilmSearchURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilmSearchURL)))
	})
}

// FilmSearchURLNotNil applies the NotNil predicate on the "film_search_url" field.
func FilmSearchURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilmSearchURL)))
	})
}

// FilmSearchURLEqualFold applies the EqualFold predicate on the "film_search_url" field.
func FilmSearchURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilmSearchURL), v))
	})
}

// FilmSearchURLContainsFold applies the ContainsFold predicate on the "film_search_url" field.
func FilmSearchURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilmSearchURL), v))
	})
}

// MangaSerieLatestURLEQ applies the EQ predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLNEQ applies the NEQ predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLIn applies the In predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMangaSerieLatestURL), v...))
	})
}

// MangaSerieLatestURLNotIn applies the NotIn predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMangaSerieLatestURL), v...))
	})
}

// MangaSerieLatestURLGT applies the GT predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLGTE applies the GTE predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLLT applies the LT predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLLTE applies the LTE predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLContains applies the Contains predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLHasPrefix applies the HasPrefix predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLHasSuffix applies the HasSuffix predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLIsNil applies the IsNil predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaSerieLatestURL)))
	})
}

// MangaSerieLatestURLNotNil applies the NotNil predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaSerieLatestURL)))
	})
}

// MangaSerieLatestURLEqualFold applies the EqualFold predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaSerieLatestURLContainsFold applies the ContainsFold predicate on the "manga_serie_latest_url" field.
func MangaSerieLatestURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMangaSerieLatestURL), v))
	})
}

// MangaFilmLatestURLEQ applies the EQ predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLNEQ applies the NEQ predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLIn applies the In predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMangaFilmLatestURL), v...))
	})
}

// MangaFilmLatestURLNotIn applies the NotIn predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMangaFilmLatestURL), v...))
	})
}

// MangaFilmLatestURLGT applies the GT predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLGTE applies the GTE predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLLT applies the LT predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLLTE applies the LTE predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLContains applies the Contains predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLHasPrefix applies the HasPrefix predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLHasSuffix applies the HasSuffix predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLIsNil applies the IsNil predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaFilmLatestURL)))
	})
}

// MangaFilmLatestURLNotNil applies the NotNil predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaFilmLatestURL)))
	})
}

// MangaFilmLatestURLEqualFold applies the EqualFold predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMangaFilmLatestURL), v))
	})
}

// MangaFilmLatestURLContainsFold applies the ContainsFold predicate on the "manga_film_latest_url" field.
func MangaFilmLatestURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMangaFilmLatestURL), v))
	})
}

// SerieLatestURLEQ applies the EQ predicate on the "serie_latest_url" field.
func SerieLatestURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLNEQ applies the NEQ predicate on the "serie_latest_url" field.
func SerieLatestURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLIn applies the In predicate on the "serie_latest_url" field.
func SerieLatestURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSerieLatestURL), v...))
	})
}

// SerieLatestURLNotIn applies the NotIn predicate on the "serie_latest_url" field.
func SerieLatestURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSerieLatestURL), v...))
	})
}

// SerieLatestURLGT applies the GT predicate on the "serie_latest_url" field.
func SerieLatestURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLGTE applies the GTE predicate on the "serie_latest_url" field.
func SerieLatestURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLLT applies the LT predicate on the "serie_latest_url" field.
func SerieLatestURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLLTE applies the LTE predicate on the "serie_latest_url" field.
func SerieLatestURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLContains applies the Contains predicate on the "serie_latest_url" field.
func SerieLatestURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLHasPrefix applies the HasPrefix predicate on the "serie_latest_url" field.
func SerieLatestURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLHasSuffix applies the HasSuffix predicate on the "serie_latest_url" field.
func SerieLatestURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLIsNil applies the IsNil predicate on the "serie_latest_url" field.
func SerieLatestURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerieLatestURL)))
	})
}

// SerieLatestURLNotNil applies the NotNil predicate on the "serie_latest_url" field.
func SerieLatestURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerieLatestURL)))
	})
}

// SerieLatestURLEqualFold applies the EqualFold predicate on the "serie_latest_url" field.
func SerieLatestURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerieLatestURL), v))
	})
}

// SerieLatestURLContainsFold applies the ContainsFold predicate on the "serie_latest_url" field.
func SerieLatestURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerieLatestURL), v))
	})
}

// FilmLatestURLEQ applies the EQ predicate on the "film_latest_url" field.
func FilmLatestURLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLNEQ applies the NEQ predicate on the "film_latest_url" field.
func FilmLatestURLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLIn applies the In predicate on the "film_latest_url" field.
func FilmLatestURLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFilmLatestURL), v...))
	})
}

// FilmLatestURLNotIn applies the NotIn predicate on the "film_latest_url" field.
func FilmLatestURLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFilmLatestURL), v...))
	})
}

// FilmLatestURLGT applies the GT predicate on the "film_latest_url" field.
func FilmLatestURLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLGTE applies the GTE predicate on the "film_latest_url" field.
func FilmLatestURLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLLT applies the LT predicate on the "film_latest_url" field.
func FilmLatestURLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLLTE applies the LTE predicate on the "film_latest_url" field.
func FilmLatestURLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLContains applies the Contains predicate on the "film_latest_url" field.
func FilmLatestURLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLHasPrefix applies the HasPrefix predicate on the "film_latest_url" field.
func FilmLatestURLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLHasSuffix applies the HasSuffix predicate on the "film_latest_url" field.
func FilmLatestURLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLIsNil applies the IsNil predicate on the "film_latest_url" field.
func FilmLatestURLIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilmLatestURL)))
	})
}

// FilmLatestURLNotNil applies the NotNil predicate on the "film_latest_url" field.
func FilmLatestURLNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilmLatestURL)))
	})
}

// FilmLatestURLEqualFold applies the EqualFold predicate on the "film_latest_url" field.
func FilmLatestURLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFilmLatestURL), v))
	})
}

// FilmLatestURLContainsFold applies the ContainsFold predicate on the "film_latest_url" field.
func FilmLatestURLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFilmLatestURL), v))
	})
}

// MangaSerieLatestPostSelectorIsNil applies the IsNil predicate on the "manga_serie_latest_post_selector" field.
func MangaSerieLatestPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaSerieLatestPostSelector)))
	})
}

// MangaSerieLatestPostSelectorNotNil applies the NotNil predicate on the "manga_serie_latest_post_selector" field.
func MangaSerieLatestPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaSerieLatestPostSelector)))
	})
}

// MangaFilmLatestPostSelectorIsNil applies the IsNil predicate on the "manga_film_latest_post_selector" field.
func MangaFilmLatestPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaFilmLatestPostSelector)))
	})
}

// MangaFilmLatestPostSelectorNotNil applies the NotNil predicate on the "manga_film_latest_post_selector" field.
func MangaFilmLatestPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaFilmLatestPostSelector)))
	})
}

// SerieLatestPostSelectorIsNil applies the IsNil predicate on the "serie_latest_post_selector" field.
func SerieLatestPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerieLatestPostSelector)))
	})
}

// SerieLatestPostSelectorNotNil applies the NotNil predicate on the "serie_latest_post_selector" field.
func SerieLatestPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerieLatestPostSelector)))
	})
}

// FilmLatestPostSelectorIsNil applies the IsNil predicate on the "film_latest_post_selector" field.
func FilmLatestPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilmLatestPostSelector)))
	})
}

// FilmLatestPostSelectorNotNil applies the NotNil predicate on the "film_latest_post_selector" field.
func FilmLatestPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilmLatestPostSelector)))
	})
}

// MangaSerieSearchPostSelectorIsNil applies the IsNil predicate on the "manga_serie_search_post_selector" field.
func MangaSerieSearchPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaSerieSearchPostSelector)))
	})
}

// MangaSerieSearchPostSelectorNotNil applies the NotNil predicate on the "manga_serie_search_post_selector" field.
func MangaSerieSearchPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaSerieSearchPostSelector)))
	})
}

// MangaFilmSearchPostSelectorIsNil applies the IsNil predicate on the "manga_film_search_post_selector" field.
func MangaFilmSearchPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaFilmSearchPostSelector)))
	})
}

// MangaFilmSearchPostSelectorNotNil applies the NotNil predicate on the "manga_film_search_post_selector" field.
func MangaFilmSearchPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaFilmSearchPostSelector)))
	})
}

// SerieSearchPostSelectorIsNil applies the IsNil predicate on the "serie_search_post_selector" field.
func SerieSearchPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerieSearchPostSelector)))
	})
}

// SerieSearchPostSelectorNotNil applies the NotNil predicate on the "serie_search_post_selector" field.
func SerieSearchPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerieSearchPostSelector)))
	})
}

// FilmSearchPostSelectorIsNil applies the IsNil predicate on the "film_search_post_selector" field.
func FilmSearchPostSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilmSearchPostSelector)))
	})
}

// FilmSearchPostSelectorNotNil applies the NotNil predicate on the "film_search_post_selector" field.
func FilmSearchPostSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilmSearchPostSelector)))
	})
}

// MangaSerieArticleSelectorIsNil applies the IsNil predicate on the "manga_serie_article_selector" field.
func MangaSerieArticleSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaSerieArticleSelector)))
	})
}

// MangaSerieArticleSelectorNotNil applies the NotNil predicate on the "manga_serie_article_selector" field.
func MangaSerieArticleSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaSerieArticleSelector)))
	})
}

// MangaFilmArticleSelectorIsNil applies the IsNil predicate on the "manga_film_article_selector" field.
func MangaFilmArticleSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMangaFilmArticleSelector)))
	})
}

// MangaFilmArticleSelectorNotNil applies the NotNil predicate on the "manga_film_article_selector" field.
func MangaFilmArticleSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMangaFilmArticleSelector)))
	})
}

// SerieArticleSelectorIsNil applies the IsNil predicate on the "serie_article_selector" field.
func SerieArticleSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerieArticleSelector)))
	})
}

// SerieArticleSelectorNotNil applies the NotNil predicate on the "serie_article_selector" field.
func SerieArticleSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerieArticleSelector)))
	})
}

// FilmArticleSelectorIsNil applies the IsNil predicate on the "film_article_selector" field.
func FilmArticleSelectorIsNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFilmArticleSelector)))
	})
}

// FilmArticleSelectorNotNil applies the NotNil predicate on the "film_article_selector" field.
func FilmArticleSelectorNotNil() predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFilmArticleSelector)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.MovieSource {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.MovieSource(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MovieSource) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MovieSource) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MovieSource) predicate.MovieSource {
	return predicate.MovieSource(func(s *sql.Selector) {
		p(s.Not())
	})
}
