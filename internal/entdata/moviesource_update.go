// Code generated by entc, DO NOT EDIT.

package entdata

import (
	"context"
	"errors"
	"fmt"
	"yola/internal/entdata/moviesource"
	"yola/internal/entdata/predicate"
	"yola/internal/entdata/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieSourceUpdate is the builder for updating MovieSource entities.
type MovieSourceUpdate struct {
	config
	hooks    []Hook
	mutation *MovieSourceMutation
}

// Where appends a list predicates to the MovieSourceUpdate builder.
func (msu *MovieSourceUpdate) Where(ps ...predicate.MovieSource) *MovieSourceUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetMangaSerieSearchURL sets the "manga_serie_search_url" field.
func (msu *MovieSourceUpdate) SetMangaSerieSearchURL(s string) *MovieSourceUpdate {
	msu.mutation.SetMangaSerieSearchURL(s)
	return msu
}

// SetNillableMangaSerieSearchURL sets the "manga_serie_search_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableMangaSerieSearchURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetMangaSerieSearchURL(*s)
	}
	return msu
}

// ClearMangaSerieSearchURL clears the value of the "manga_serie_search_url" field.
func (msu *MovieSourceUpdate) ClearMangaSerieSearchURL() *MovieSourceUpdate {
	msu.mutation.ClearMangaSerieSearchURL()
	return msu
}

// SetMangaFilmSearchURL sets the "manga_film_search_url" field.
func (msu *MovieSourceUpdate) SetMangaFilmSearchURL(s string) *MovieSourceUpdate {
	msu.mutation.SetMangaFilmSearchURL(s)
	return msu
}

// SetNillableMangaFilmSearchURL sets the "manga_film_search_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableMangaFilmSearchURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetMangaFilmSearchURL(*s)
	}
	return msu
}

// ClearMangaFilmSearchURL clears the value of the "manga_film_search_url" field.
func (msu *MovieSourceUpdate) ClearMangaFilmSearchURL() *MovieSourceUpdate {
	msu.mutation.ClearMangaFilmSearchURL()
	return msu
}

// SetSerieSearchURL sets the "serie_search_url" field.
func (msu *MovieSourceUpdate) SetSerieSearchURL(s string) *MovieSourceUpdate {
	msu.mutation.SetSerieSearchURL(s)
	return msu
}

// SetNillableSerieSearchURL sets the "serie_search_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableSerieSearchURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetSerieSearchURL(*s)
	}
	return msu
}

// ClearSerieSearchURL clears the value of the "serie_search_url" field.
func (msu *MovieSourceUpdate) ClearSerieSearchURL() *MovieSourceUpdate {
	msu.mutation.ClearSerieSearchURL()
	return msu
}

// SetFilmSearchURL sets the "film_search_url" field.
func (msu *MovieSourceUpdate) SetFilmSearchURL(s string) *MovieSourceUpdate {
	msu.mutation.SetFilmSearchURL(s)
	return msu
}

// SetNillableFilmSearchURL sets the "film_search_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableFilmSearchURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetFilmSearchURL(*s)
	}
	return msu
}

// ClearFilmSearchURL clears the value of the "film_search_url" field.
func (msu *MovieSourceUpdate) ClearFilmSearchURL() *MovieSourceUpdate {
	msu.mutation.ClearFilmSearchURL()
	return msu
}

// SetMangaSerieLatestURL sets the "manga_serie_latest_url" field.
func (msu *MovieSourceUpdate) SetMangaSerieLatestURL(s string) *MovieSourceUpdate {
	msu.mutation.SetMangaSerieLatestURL(s)
	return msu
}

// SetNillableMangaSerieLatestURL sets the "manga_serie_latest_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableMangaSerieLatestURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetMangaSerieLatestURL(*s)
	}
	return msu
}

// ClearMangaSerieLatestURL clears the value of the "manga_serie_latest_url" field.
func (msu *MovieSourceUpdate) ClearMangaSerieLatestURL() *MovieSourceUpdate {
	msu.mutation.ClearMangaSerieLatestURL()
	return msu
}

// SetMangaFilmLatestURL sets the "manga_film_latest_url" field.
func (msu *MovieSourceUpdate) SetMangaFilmLatestURL(s string) *MovieSourceUpdate {
	msu.mutation.SetMangaFilmLatestURL(s)
	return msu
}

// SetNillableMangaFilmLatestURL sets the "manga_film_latest_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableMangaFilmLatestURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetMangaFilmLatestURL(*s)
	}
	return msu
}

// ClearMangaFilmLatestURL clears the value of the "manga_film_latest_url" field.
func (msu *MovieSourceUpdate) ClearMangaFilmLatestURL() *MovieSourceUpdate {
	msu.mutation.ClearMangaFilmLatestURL()
	return msu
}

// SetSerieLatestURL sets the "serie_latest_url" field.
func (msu *MovieSourceUpdate) SetSerieLatestURL(s string) *MovieSourceUpdate {
	msu.mutation.SetSerieLatestURL(s)
	return msu
}

// SetNillableSerieLatestURL sets the "serie_latest_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableSerieLatestURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetSerieLatestURL(*s)
	}
	return msu
}

// ClearSerieLatestURL clears the value of the "serie_latest_url" field.
func (msu *MovieSourceUpdate) ClearSerieLatestURL() *MovieSourceUpdate {
	msu.mutation.ClearSerieLatestURL()
	return msu
}

// SetFilmLatestURL sets the "film_latest_url" field.
func (msu *MovieSourceUpdate) SetFilmLatestURL(s string) *MovieSourceUpdate {
	msu.mutation.SetFilmLatestURL(s)
	return msu
}

// SetNillableFilmLatestURL sets the "film_latest_url" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableFilmLatestURL(s *string) *MovieSourceUpdate {
	if s != nil {
		msu.SetFilmLatestURL(*s)
	}
	return msu
}

// ClearFilmLatestURL clears the value of the "film_latest_url" field.
func (msu *MovieSourceUpdate) ClearFilmLatestURL() *MovieSourceUpdate {
	msu.mutation.ClearFilmLatestURL()
	return msu
}

// SetMangaSerieLatestPostSelector sets the "manga_serie_latest_post_selector" field.
func (msu *MovieSourceUpdate) SetMangaSerieLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaSerieLatestPostSelector(sps)
	return msu
}

// ClearMangaSerieLatestPostSelector clears the value of the "manga_serie_latest_post_selector" field.
func (msu *MovieSourceUpdate) ClearMangaSerieLatestPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaSerieLatestPostSelector()
	return msu
}

// SetMangaFilmLatestPostSelector sets the "manga_film_latest_post_selector" field.
func (msu *MovieSourceUpdate) SetMangaFilmLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaFilmLatestPostSelector(sps)
	return msu
}

// ClearMangaFilmLatestPostSelector clears the value of the "manga_film_latest_post_selector" field.
func (msu *MovieSourceUpdate) ClearMangaFilmLatestPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaFilmLatestPostSelector()
	return msu
}

// SetSerieLatestPostSelector sets the "serie_latest_post_selector" field.
func (msu *MovieSourceUpdate) SetSerieLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetSerieLatestPostSelector(sps)
	return msu
}

// ClearSerieLatestPostSelector clears the value of the "serie_latest_post_selector" field.
func (msu *MovieSourceUpdate) ClearSerieLatestPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearSerieLatestPostSelector()
	return msu
}

// SetFilmLatestPostSelector sets the "film_latest_post_selector" field.
func (msu *MovieSourceUpdate) SetFilmLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetFilmLatestPostSelector(sps)
	return msu
}

// ClearFilmLatestPostSelector clears the value of the "film_latest_post_selector" field.
func (msu *MovieSourceUpdate) ClearFilmLatestPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearFilmLatestPostSelector()
	return msu
}

// SetMangaSerieSearchPostSelector sets the "manga_serie_search_post_selector" field.
func (msu *MovieSourceUpdate) SetMangaSerieSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaSerieSearchPostSelector(sps)
	return msu
}

// ClearMangaSerieSearchPostSelector clears the value of the "manga_serie_search_post_selector" field.
func (msu *MovieSourceUpdate) ClearMangaSerieSearchPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaSerieSearchPostSelector()
	return msu
}

// SetMangaFilmSearchPostSelector sets the "manga_film_search_post_selector" field.
func (msu *MovieSourceUpdate) SetMangaFilmSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaFilmSearchPostSelector(sps)
	return msu
}

// ClearMangaFilmSearchPostSelector clears the value of the "manga_film_search_post_selector" field.
func (msu *MovieSourceUpdate) ClearMangaFilmSearchPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaFilmSearchPostSelector()
	return msu
}

// SetSerieSearchPostSelector sets the "serie_search_post_selector" field.
func (msu *MovieSourceUpdate) SetSerieSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetSerieSearchPostSelector(sps)
	return msu
}

// ClearSerieSearchPostSelector clears the value of the "serie_search_post_selector" field.
func (msu *MovieSourceUpdate) ClearSerieSearchPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearSerieSearchPostSelector()
	return msu
}

// SetFilmSearchPostSelector sets the "film_search_post_selector" field.
func (msu *MovieSourceUpdate) SetFilmSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdate {
	msu.mutation.SetFilmSearchPostSelector(sps)
	return msu
}

// ClearFilmSearchPostSelector clears the value of the "film_search_post_selector" field.
func (msu *MovieSourceUpdate) ClearFilmSearchPostSelector() *MovieSourceUpdate {
	msu.mutation.ClearFilmSearchPostSelector()
	return msu
}

// SetMangaSerieArticleSelector sets the "manga_serie_article_selector" field.
func (msu *MovieSourceUpdate) SetMangaSerieArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaSerieArticleSelector(sas)
	return msu
}

// ClearMangaSerieArticleSelector clears the value of the "manga_serie_article_selector" field.
func (msu *MovieSourceUpdate) ClearMangaSerieArticleSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaSerieArticleSelector()
	return msu
}

// SetMangaFilmArticleSelector sets the "manga_film_article_selector" field.
func (msu *MovieSourceUpdate) SetMangaFilmArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdate {
	msu.mutation.SetMangaFilmArticleSelector(sas)
	return msu
}

// ClearMangaFilmArticleSelector clears the value of the "manga_film_article_selector" field.
func (msu *MovieSourceUpdate) ClearMangaFilmArticleSelector() *MovieSourceUpdate {
	msu.mutation.ClearMangaFilmArticleSelector()
	return msu
}

// SetSerieArticleSelector sets the "serie_article_selector" field.
func (msu *MovieSourceUpdate) SetSerieArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdate {
	msu.mutation.SetSerieArticleSelector(sas)
	return msu
}

// ClearSerieArticleSelector clears the value of the "serie_article_selector" field.
func (msu *MovieSourceUpdate) ClearSerieArticleSelector() *MovieSourceUpdate {
	msu.mutation.ClearSerieArticleSelector()
	return msu
}

// SetFilmArticleSelector sets the "film_article_selector" field.
func (msu *MovieSourceUpdate) SetFilmArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdate {
	msu.mutation.SetFilmArticleSelector(sas)
	return msu
}

// ClearFilmArticleSelector clears the value of the "film_article_selector" field.
func (msu *MovieSourceUpdate) ClearFilmArticleSelector() *MovieSourceUpdate {
	msu.mutation.ClearFilmArticleSelector()
	return msu
}

// SetStatus sets the "status" field.
func (msu *MovieSourceUpdate) SetStatus(b bool) *MovieSourceUpdate {
	msu.mutation.SetStatus(b)
	return msu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (msu *MovieSourceUpdate) SetNillableStatus(b *bool) *MovieSourceUpdate {
	if b != nil {
		msu.SetStatus(*b)
	}
	return msu
}

// SetName sets the "name" field.
func (msu *MovieSourceUpdate) SetName(s string) *MovieSourceUpdate {
	msu.mutation.SetName(s)
	return msu
}

// SetURL sets the "url" field.
func (msu *MovieSourceUpdate) SetURL(s string) *MovieSourceUpdate {
	msu.mutation.SetURL(s)
	return msu
}

// Mutation returns the MovieSourceMutation object of the builder.
func (msu *MovieSourceUpdate) Mutation() *MovieSourceMutation {
	return msu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MovieSourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(msu.hooks) == 0 {
		affected, err = msu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msu.mutation = mutation
			affected, err = msu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(msu.hooks) - 1; i >= 0; i-- {
			if msu.hooks[i] == nil {
				return 0, fmt.Errorf("entdata: uninitialized hook (forgotten import entdata/runtime?)")
			}
			mut = msu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MovieSourceUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MovieSourceUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MovieSourceUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msu *MovieSourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moviesource.Table,
			Columns: moviesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moviesource.FieldID,
			},
		},
	}
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.MangaSerieSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaSerieSearchURL,
		})
	}
	if msu.mutation.MangaSerieSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaSerieSearchURL,
		})
	}
	if value, ok := msu.mutation.MangaFilmSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaFilmSearchURL,
		})
	}
	if msu.mutation.MangaFilmSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaFilmSearchURL,
		})
	}
	if value, ok := msu.mutation.SerieSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldSerieSearchURL,
		})
	}
	if msu.mutation.SerieSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldSerieSearchURL,
		})
	}
	if value, ok := msu.mutation.FilmSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldFilmSearchURL,
		})
	}
	if msu.mutation.FilmSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldFilmSearchURL,
		})
	}
	if value, ok := msu.mutation.MangaSerieLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaSerieLatestURL,
		})
	}
	if msu.mutation.MangaSerieLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaSerieLatestURL,
		})
	}
	if value, ok := msu.mutation.MangaFilmLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaFilmLatestURL,
		})
	}
	if msu.mutation.MangaFilmLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaFilmLatestURL,
		})
	}
	if value, ok := msu.mutation.SerieLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldSerieLatestURL,
		})
	}
	if msu.mutation.SerieLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldSerieLatestURL,
		})
	}
	if value, ok := msu.mutation.FilmLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldFilmLatestURL,
		})
	}
	if msu.mutation.FilmLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldFilmLatestURL,
		})
	}
	if value, ok := msu.mutation.MangaSerieLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieLatestPostSelector,
		})
	}
	if msu.mutation.MangaSerieLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieLatestPostSelector,
		})
	}
	if value, ok := msu.mutation.MangaFilmLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmLatestPostSelector,
		})
	}
	if msu.mutation.MangaFilmLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmLatestPostSelector,
		})
	}
	if value, ok := msu.mutation.SerieLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieLatestPostSelector,
		})
	}
	if msu.mutation.SerieLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieLatestPostSelector,
		})
	}
	if value, ok := msu.mutation.FilmLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmLatestPostSelector,
		})
	}
	if msu.mutation.FilmLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmLatestPostSelector,
		})
	}
	if value, ok := msu.mutation.MangaSerieSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieSearchPostSelector,
		})
	}
	if msu.mutation.MangaSerieSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieSearchPostSelector,
		})
	}
	if value, ok := msu.mutation.MangaFilmSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmSearchPostSelector,
		})
	}
	if msu.mutation.MangaFilmSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmSearchPostSelector,
		})
	}
	if value, ok := msu.mutation.SerieSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieSearchPostSelector,
		})
	}
	if msu.mutation.SerieSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieSearchPostSelector,
		})
	}
	if value, ok := msu.mutation.FilmSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmSearchPostSelector,
		})
	}
	if msu.mutation.FilmSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmSearchPostSelector,
		})
	}
	if value, ok := msu.mutation.MangaSerieArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieArticleSelector,
		})
	}
	if msu.mutation.MangaSerieArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieArticleSelector,
		})
	}
	if value, ok := msu.mutation.MangaFilmArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmArticleSelector,
		})
	}
	if msu.mutation.MangaFilmArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmArticleSelector,
		})
	}
	if value, ok := msu.mutation.SerieArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieArticleSelector,
		})
	}
	if msu.mutation.SerieArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieArticleSelector,
		})
	}
	if value, ok := msu.mutation.FilmArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmArticleSelector,
		})
	}
	if msu.mutation.FilmArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmArticleSelector,
		})
	}
	if value, ok := msu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moviesource.FieldStatus,
		})
	}
	if value, ok := msu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldName,
		})
	}
	if value, ok := msu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldURL,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MovieSourceUpdateOne is the builder for updating a single MovieSource entity.
type MovieSourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieSourceMutation
}

// SetMangaSerieSearchURL sets the "manga_serie_search_url" field.
func (msuo *MovieSourceUpdateOne) SetMangaSerieSearchURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaSerieSearchURL(s)
	return msuo
}

// SetNillableMangaSerieSearchURL sets the "manga_serie_search_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableMangaSerieSearchURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetMangaSerieSearchURL(*s)
	}
	return msuo
}

// ClearMangaSerieSearchURL clears the value of the "manga_serie_search_url" field.
func (msuo *MovieSourceUpdateOne) ClearMangaSerieSearchURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaSerieSearchURL()
	return msuo
}

// SetMangaFilmSearchURL sets the "manga_film_search_url" field.
func (msuo *MovieSourceUpdateOne) SetMangaFilmSearchURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaFilmSearchURL(s)
	return msuo
}

// SetNillableMangaFilmSearchURL sets the "manga_film_search_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableMangaFilmSearchURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetMangaFilmSearchURL(*s)
	}
	return msuo
}

// ClearMangaFilmSearchURL clears the value of the "manga_film_search_url" field.
func (msuo *MovieSourceUpdateOne) ClearMangaFilmSearchURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaFilmSearchURL()
	return msuo
}

// SetSerieSearchURL sets the "serie_search_url" field.
func (msuo *MovieSourceUpdateOne) SetSerieSearchURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetSerieSearchURL(s)
	return msuo
}

// SetNillableSerieSearchURL sets the "serie_search_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableSerieSearchURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetSerieSearchURL(*s)
	}
	return msuo
}

// ClearSerieSearchURL clears the value of the "serie_search_url" field.
func (msuo *MovieSourceUpdateOne) ClearSerieSearchURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearSerieSearchURL()
	return msuo
}

// SetFilmSearchURL sets the "film_search_url" field.
func (msuo *MovieSourceUpdateOne) SetFilmSearchURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetFilmSearchURL(s)
	return msuo
}

// SetNillableFilmSearchURL sets the "film_search_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableFilmSearchURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetFilmSearchURL(*s)
	}
	return msuo
}

// ClearFilmSearchURL clears the value of the "film_search_url" field.
func (msuo *MovieSourceUpdateOne) ClearFilmSearchURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearFilmSearchURL()
	return msuo
}

// SetMangaSerieLatestURL sets the "manga_serie_latest_url" field.
func (msuo *MovieSourceUpdateOne) SetMangaSerieLatestURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaSerieLatestURL(s)
	return msuo
}

// SetNillableMangaSerieLatestURL sets the "manga_serie_latest_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableMangaSerieLatestURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetMangaSerieLatestURL(*s)
	}
	return msuo
}

// ClearMangaSerieLatestURL clears the value of the "manga_serie_latest_url" field.
func (msuo *MovieSourceUpdateOne) ClearMangaSerieLatestURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaSerieLatestURL()
	return msuo
}

// SetMangaFilmLatestURL sets the "manga_film_latest_url" field.
func (msuo *MovieSourceUpdateOne) SetMangaFilmLatestURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaFilmLatestURL(s)
	return msuo
}

// SetNillableMangaFilmLatestURL sets the "manga_film_latest_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableMangaFilmLatestURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetMangaFilmLatestURL(*s)
	}
	return msuo
}

// ClearMangaFilmLatestURL clears the value of the "manga_film_latest_url" field.
func (msuo *MovieSourceUpdateOne) ClearMangaFilmLatestURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaFilmLatestURL()
	return msuo
}

// SetSerieLatestURL sets the "serie_latest_url" field.
func (msuo *MovieSourceUpdateOne) SetSerieLatestURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetSerieLatestURL(s)
	return msuo
}

// SetNillableSerieLatestURL sets the "serie_latest_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableSerieLatestURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetSerieLatestURL(*s)
	}
	return msuo
}

// ClearSerieLatestURL clears the value of the "serie_latest_url" field.
func (msuo *MovieSourceUpdateOne) ClearSerieLatestURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearSerieLatestURL()
	return msuo
}

// SetFilmLatestURL sets the "film_latest_url" field.
func (msuo *MovieSourceUpdateOne) SetFilmLatestURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetFilmLatestURL(s)
	return msuo
}

// SetNillableFilmLatestURL sets the "film_latest_url" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableFilmLatestURL(s *string) *MovieSourceUpdateOne {
	if s != nil {
		msuo.SetFilmLatestURL(*s)
	}
	return msuo
}

// ClearFilmLatestURL clears the value of the "film_latest_url" field.
func (msuo *MovieSourceUpdateOne) ClearFilmLatestURL() *MovieSourceUpdateOne {
	msuo.mutation.ClearFilmLatestURL()
	return msuo
}

// SetMangaSerieLatestPostSelector sets the "manga_serie_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaSerieLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaSerieLatestPostSelector(sps)
	return msuo
}

// ClearMangaSerieLatestPostSelector clears the value of the "manga_serie_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaSerieLatestPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaSerieLatestPostSelector()
	return msuo
}

// SetMangaFilmLatestPostSelector sets the "manga_film_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaFilmLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaFilmLatestPostSelector(sps)
	return msuo
}

// ClearMangaFilmLatestPostSelector clears the value of the "manga_film_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaFilmLatestPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaFilmLatestPostSelector()
	return msuo
}

// SetSerieLatestPostSelector sets the "serie_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetSerieLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetSerieLatestPostSelector(sps)
	return msuo
}

// ClearSerieLatestPostSelector clears the value of the "serie_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearSerieLatestPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearSerieLatestPostSelector()
	return msuo
}

// SetFilmLatestPostSelector sets the "film_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetFilmLatestPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetFilmLatestPostSelector(sps)
	return msuo
}

// ClearFilmLatestPostSelector clears the value of the "film_latest_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearFilmLatestPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearFilmLatestPostSelector()
	return msuo
}

// SetMangaSerieSearchPostSelector sets the "manga_serie_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaSerieSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaSerieSearchPostSelector(sps)
	return msuo
}

// ClearMangaSerieSearchPostSelector clears the value of the "manga_serie_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaSerieSearchPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaSerieSearchPostSelector()
	return msuo
}

// SetMangaFilmSearchPostSelector sets the "manga_film_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaFilmSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaFilmSearchPostSelector(sps)
	return msuo
}

// ClearMangaFilmSearchPostSelector clears the value of the "manga_film_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaFilmSearchPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaFilmSearchPostSelector()
	return msuo
}

// SetSerieSearchPostSelector sets the "serie_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetSerieSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetSerieSearchPostSelector(sps)
	return msuo
}

// ClearSerieSearchPostSelector clears the value of the "serie_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearSerieSearchPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearSerieSearchPostSelector()
	return msuo
}

// SetFilmSearchPostSelector sets the "film_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) SetFilmSearchPostSelector(sps *schema.MoviePostSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetFilmSearchPostSelector(sps)
	return msuo
}

// ClearFilmSearchPostSelector clears the value of the "film_search_post_selector" field.
func (msuo *MovieSourceUpdateOne) ClearFilmSearchPostSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearFilmSearchPostSelector()
	return msuo
}

// SetMangaSerieArticleSelector sets the "manga_serie_article_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaSerieArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaSerieArticleSelector(sas)
	return msuo
}

// ClearMangaSerieArticleSelector clears the value of the "manga_serie_article_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaSerieArticleSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaSerieArticleSelector()
	return msuo
}

// SetMangaFilmArticleSelector sets the "manga_film_article_selector" field.
func (msuo *MovieSourceUpdateOne) SetMangaFilmArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetMangaFilmArticleSelector(sas)
	return msuo
}

// ClearMangaFilmArticleSelector clears the value of the "manga_film_article_selector" field.
func (msuo *MovieSourceUpdateOne) ClearMangaFilmArticleSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearMangaFilmArticleSelector()
	return msuo
}

// SetSerieArticleSelector sets the "serie_article_selector" field.
func (msuo *MovieSourceUpdateOne) SetSerieArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetSerieArticleSelector(sas)
	return msuo
}

// ClearSerieArticleSelector clears the value of the "serie_article_selector" field.
func (msuo *MovieSourceUpdateOne) ClearSerieArticleSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearSerieArticleSelector()
	return msuo
}

// SetFilmArticleSelector sets the "film_article_selector" field.
func (msuo *MovieSourceUpdateOne) SetFilmArticleSelector(sas *schema.MovieArticleSelector) *MovieSourceUpdateOne {
	msuo.mutation.SetFilmArticleSelector(sas)
	return msuo
}

// ClearFilmArticleSelector clears the value of the "film_article_selector" field.
func (msuo *MovieSourceUpdateOne) ClearFilmArticleSelector() *MovieSourceUpdateOne {
	msuo.mutation.ClearFilmArticleSelector()
	return msuo
}

// SetStatus sets the "status" field.
func (msuo *MovieSourceUpdateOne) SetStatus(b bool) *MovieSourceUpdateOne {
	msuo.mutation.SetStatus(b)
	return msuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (msuo *MovieSourceUpdateOne) SetNillableStatus(b *bool) *MovieSourceUpdateOne {
	if b != nil {
		msuo.SetStatus(*b)
	}
	return msuo
}

// SetName sets the "name" field.
func (msuo *MovieSourceUpdateOne) SetName(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetName(s)
	return msuo
}

// SetURL sets the "url" field.
func (msuo *MovieSourceUpdateOne) SetURL(s string) *MovieSourceUpdateOne {
	msuo.mutation.SetURL(s)
	return msuo
}

// Mutation returns the MovieSourceMutation object of the builder.
func (msuo *MovieSourceUpdateOne) Mutation() *MovieSourceMutation {
	return msuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MovieSourceUpdateOne) Select(field string, fields ...string) *MovieSourceUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MovieSource entity.
func (msuo *MovieSourceUpdateOne) Save(ctx context.Context) (*MovieSource, error) {
	var (
		err  error
		node *MovieSource
	)
	if len(msuo.hooks) == 0 {
		node, err = msuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MovieSourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			msuo.mutation = mutation
			node, err = msuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(msuo.hooks) - 1; i >= 0; i-- {
			if msuo.hooks[i] == nil {
				return nil, fmt.Errorf("entdata: uninitialized hook (forgotten import entdata/runtime?)")
			}
			mut = msuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, msuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MovieSourceUpdateOne) SaveX(ctx context.Context) *MovieSource {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MovieSourceUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MovieSourceUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (msuo *MovieSourceUpdateOne) sqlSave(ctx context.Context) (_node *MovieSource, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   moviesource.Table,
			Columns: moviesource.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: moviesource.FieldID,
			},
		},
	}
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entdata: missing "MovieSource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, moviesource.FieldID)
		for _, f := range fields {
			if !moviesource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entdata: invalid field %q for query", f)}
			}
			if f != moviesource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.MangaSerieSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaSerieSearchURL,
		})
	}
	if msuo.mutation.MangaSerieSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaSerieSearchURL,
		})
	}
	if value, ok := msuo.mutation.MangaFilmSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaFilmSearchURL,
		})
	}
	if msuo.mutation.MangaFilmSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaFilmSearchURL,
		})
	}
	if value, ok := msuo.mutation.SerieSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldSerieSearchURL,
		})
	}
	if msuo.mutation.SerieSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldSerieSearchURL,
		})
	}
	if value, ok := msuo.mutation.FilmSearchURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldFilmSearchURL,
		})
	}
	if msuo.mutation.FilmSearchURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldFilmSearchURL,
		})
	}
	if value, ok := msuo.mutation.MangaSerieLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaSerieLatestURL,
		})
	}
	if msuo.mutation.MangaSerieLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaSerieLatestURL,
		})
	}
	if value, ok := msuo.mutation.MangaFilmLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldMangaFilmLatestURL,
		})
	}
	if msuo.mutation.MangaFilmLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldMangaFilmLatestURL,
		})
	}
	if value, ok := msuo.mutation.SerieLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldSerieLatestURL,
		})
	}
	if msuo.mutation.SerieLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldSerieLatestURL,
		})
	}
	if value, ok := msuo.mutation.FilmLatestURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldFilmLatestURL,
		})
	}
	if msuo.mutation.FilmLatestURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: moviesource.FieldFilmLatestURL,
		})
	}
	if value, ok := msuo.mutation.MangaSerieLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieLatestPostSelector,
		})
	}
	if msuo.mutation.MangaSerieLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieLatestPostSelector,
		})
	}
	if value, ok := msuo.mutation.MangaFilmLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmLatestPostSelector,
		})
	}
	if msuo.mutation.MangaFilmLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmLatestPostSelector,
		})
	}
	if value, ok := msuo.mutation.SerieLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieLatestPostSelector,
		})
	}
	if msuo.mutation.SerieLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieLatestPostSelector,
		})
	}
	if value, ok := msuo.mutation.FilmLatestPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmLatestPostSelector,
		})
	}
	if msuo.mutation.FilmLatestPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmLatestPostSelector,
		})
	}
	if value, ok := msuo.mutation.MangaSerieSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieSearchPostSelector,
		})
	}
	if msuo.mutation.MangaSerieSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieSearchPostSelector,
		})
	}
	if value, ok := msuo.mutation.MangaFilmSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmSearchPostSelector,
		})
	}
	if msuo.mutation.MangaFilmSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmSearchPostSelector,
		})
	}
	if value, ok := msuo.mutation.SerieSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieSearchPostSelector,
		})
	}
	if msuo.mutation.SerieSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieSearchPostSelector,
		})
	}
	if value, ok := msuo.mutation.FilmSearchPostSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmSearchPostSelector,
		})
	}
	if msuo.mutation.FilmSearchPostSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmSearchPostSelector,
		})
	}
	if value, ok := msuo.mutation.MangaSerieArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaSerieArticleSelector,
		})
	}
	if msuo.mutation.MangaSerieArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaSerieArticleSelector,
		})
	}
	if value, ok := msuo.mutation.MangaFilmArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldMangaFilmArticleSelector,
		})
	}
	if msuo.mutation.MangaFilmArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldMangaFilmArticleSelector,
		})
	}
	if value, ok := msuo.mutation.SerieArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldSerieArticleSelector,
		})
	}
	if msuo.mutation.SerieArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldSerieArticleSelector,
		})
	}
	if value, ok := msuo.mutation.FilmArticleSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: moviesource.FieldFilmArticleSelector,
		})
	}
	if msuo.mutation.FilmArticleSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: moviesource.FieldFilmArticleSelector,
		})
	}
	if value, ok := msuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: moviesource.FieldStatus,
		})
	}
	if value, ok := msuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldName,
		})
	}
	if value, ok := msuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: moviesource.FieldURL,
		})
	}
	_node = &MovieSource{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{moviesource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
