// Code generated by entc, DO NOT EDIT.

package entdata

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"yola/internal/entdata/moviesource"
	"yola/internal/entdata/predicate"
	"yola/internal/entdata/schema"
	"yola/internal/entdata/tv"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMovieSource = "MovieSource"
	TypeTv          = "Tv"
)

// MovieSourceMutation represents an operation that mutates the MovieSource nodes in the graph.
type MovieSourceMutation struct {
	config
	op                               Op
	typ                              string
	id                               *int
	manga_serie_search_url           *string
	manga_film_search_url            *string
	serie_search_url                 *string
	film_search_url                  *string
	manga_serie_latest_url           *string
	manga_film_latest_url            *string
	serie_latest_url                 *string
	film_latest_url                  *string
	manga_serie_latest_post_selector **schema.MoviePostSelector
	manga_film_latest_post_selector  **schema.MoviePostSelector
	serie_latest_post_selector       **schema.MoviePostSelector
	film_latest_post_selector        **schema.MoviePostSelector
	manga_serie_search_post_selector **schema.MoviePostSelector
	manga_film_search_post_selector  **schema.MoviePostSelector
	serie_search_post_selector       **schema.MoviePostSelector
	film_search_post_selector        **schema.MoviePostSelector
	manga_serie_article_selector     **schema.MovieArticleSelector
	manga_film_article_selector      **schema.MovieArticleSelector
	serie_article_selector           **schema.MovieArticleSelector
	film_article_selector            **schema.MovieArticleSelector
	language                         *string
	status                           *bool
	name                             *string
	url                              *string
	clearedFields                    map[string]struct{}
	done                             bool
	oldValue                         func(context.Context) (*MovieSource, error)
	predicates                       []predicate.MovieSource
}

var _ ent.Mutation = (*MovieSourceMutation)(nil)

// moviesourceOption allows management of the mutation configuration using functional options.
type moviesourceOption func(*MovieSourceMutation)

// newMovieSourceMutation creates new mutation for the MovieSource entity.
func newMovieSourceMutation(c config, op Op, opts ...moviesourceOption) *MovieSourceMutation {
	m := &MovieSourceMutation{
		config:        c,
		op:            op,
		typ:           TypeMovieSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieSourceID sets the ID field of the mutation.
func withMovieSourceID(id int) moviesourceOption {
	return func(m *MovieSourceMutation) {
		var (
			err   error
			once  sync.Once
			value *MovieSource
		)
		m.oldValue = func(ctx context.Context) (*MovieSource, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MovieSource.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovieSource sets the old MovieSource of the mutation.
func withMovieSource(node *MovieSource) moviesourceOption {
	return func(m *MovieSourceMutation) {
		m.oldValue = func(context.Context) (*MovieSource, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieSourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieSourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entdata: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieSourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieSourceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MovieSource.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMangaSerieSearchURL sets the "manga_serie_search_url" field.
func (m *MovieSourceMutation) SetMangaSerieSearchURL(s string) {
	m.manga_serie_search_url = &s
}

// MangaSerieSearchURL returns the value of the "manga_serie_search_url" field in the mutation.
func (m *MovieSourceMutation) MangaSerieSearchURL() (r string, exists bool) {
	v := m.manga_serie_search_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaSerieSearchURL returns the old "manga_serie_search_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaSerieSearchURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaSerieSearchURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaSerieSearchURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaSerieSearchURL: %w", err)
	}
	return oldValue.MangaSerieSearchURL, nil
}

// ClearMangaSerieSearchURL clears the value of the "manga_serie_search_url" field.
func (m *MovieSourceMutation) ClearMangaSerieSearchURL() {
	m.manga_serie_search_url = nil
	m.clearedFields[moviesource.FieldMangaSerieSearchURL] = struct{}{}
}

// MangaSerieSearchURLCleared returns if the "manga_serie_search_url" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaSerieSearchURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaSerieSearchURL]
	return ok
}

// ResetMangaSerieSearchURL resets all changes to the "manga_serie_search_url" field.
func (m *MovieSourceMutation) ResetMangaSerieSearchURL() {
	m.manga_serie_search_url = nil
	delete(m.clearedFields, moviesource.FieldMangaSerieSearchURL)
}

// SetMangaFilmSearchURL sets the "manga_film_search_url" field.
func (m *MovieSourceMutation) SetMangaFilmSearchURL(s string) {
	m.manga_film_search_url = &s
}

// MangaFilmSearchURL returns the value of the "manga_film_search_url" field in the mutation.
func (m *MovieSourceMutation) MangaFilmSearchURL() (r string, exists bool) {
	v := m.manga_film_search_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaFilmSearchURL returns the old "manga_film_search_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaFilmSearchURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaFilmSearchURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaFilmSearchURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaFilmSearchURL: %w", err)
	}
	return oldValue.MangaFilmSearchURL, nil
}

// ClearMangaFilmSearchURL clears the value of the "manga_film_search_url" field.
func (m *MovieSourceMutation) ClearMangaFilmSearchURL() {
	m.manga_film_search_url = nil
	m.clearedFields[moviesource.FieldMangaFilmSearchURL] = struct{}{}
}

// MangaFilmSearchURLCleared returns if the "manga_film_search_url" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaFilmSearchURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaFilmSearchURL]
	return ok
}

// ResetMangaFilmSearchURL resets all changes to the "manga_film_search_url" field.
func (m *MovieSourceMutation) ResetMangaFilmSearchURL() {
	m.manga_film_search_url = nil
	delete(m.clearedFields, moviesource.FieldMangaFilmSearchURL)
}

// SetSerieSearchURL sets the "serie_search_url" field.
func (m *MovieSourceMutation) SetSerieSearchURL(s string) {
	m.serie_search_url = &s
}

// SerieSearchURL returns the value of the "serie_search_url" field in the mutation.
func (m *MovieSourceMutation) SerieSearchURL() (r string, exists bool) {
	v := m.serie_search_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSerieSearchURL returns the old "serie_search_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldSerieSearchURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerieSearchURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerieSearchURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerieSearchURL: %w", err)
	}
	return oldValue.SerieSearchURL, nil
}

// ClearSerieSearchURL clears the value of the "serie_search_url" field.
func (m *MovieSourceMutation) ClearSerieSearchURL() {
	m.serie_search_url = nil
	m.clearedFields[moviesource.FieldSerieSearchURL] = struct{}{}
}

// SerieSearchURLCleared returns if the "serie_search_url" field was cleared in this mutation.
func (m *MovieSourceMutation) SerieSearchURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldSerieSearchURL]
	return ok
}

// ResetSerieSearchURL resets all changes to the "serie_search_url" field.
func (m *MovieSourceMutation) ResetSerieSearchURL() {
	m.serie_search_url = nil
	delete(m.clearedFields, moviesource.FieldSerieSearchURL)
}

// SetFilmSearchURL sets the "film_search_url" field.
func (m *MovieSourceMutation) SetFilmSearchURL(s string) {
	m.film_search_url = &s
}

// FilmSearchURL returns the value of the "film_search_url" field in the mutation.
func (m *MovieSourceMutation) FilmSearchURL() (r string, exists bool) {
	v := m.film_search_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFilmSearchURL returns the old "film_search_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldFilmSearchURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilmSearchURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilmSearchURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilmSearchURL: %w", err)
	}
	return oldValue.FilmSearchURL, nil
}

// ClearFilmSearchURL clears the value of the "film_search_url" field.
func (m *MovieSourceMutation) ClearFilmSearchURL() {
	m.film_search_url = nil
	m.clearedFields[moviesource.FieldFilmSearchURL] = struct{}{}
}

// FilmSearchURLCleared returns if the "film_search_url" field was cleared in this mutation.
func (m *MovieSourceMutation) FilmSearchURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldFilmSearchURL]
	return ok
}

// ResetFilmSearchURL resets all changes to the "film_search_url" field.
func (m *MovieSourceMutation) ResetFilmSearchURL() {
	m.film_search_url = nil
	delete(m.clearedFields, moviesource.FieldFilmSearchURL)
}

// SetMangaSerieLatestURL sets the "manga_serie_latest_url" field.
func (m *MovieSourceMutation) SetMangaSerieLatestURL(s string) {
	m.manga_serie_latest_url = &s
}

// MangaSerieLatestURL returns the value of the "manga_serie_latest_url" field in the mutation.
func (m *MovieSourceMutation) MangaSerieLatestURL() (r string, exists bool) {
	v := m.manga_serie_latest_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaSerieLatestURL returns the old "manga_serie_latest_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaSerieLatestURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaSerieLatestURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaSerieLatestURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaSerieLatestURL: %w", err)
	}
	return oldValue.MangaSerieLatestURL, nil
}

// ClearMangaSerieLatestURL clears the value of the "manga_serie_latest_url" field.
func (m *MovieSourceMutation) ClearMangaSerieLatestURL() {
	m.manga_serie_latest_url = nil
	m.clearedFields[moviesource.FieldMangaSerieLatestURL] = struct{}{}
}

// MangaSerieLatestURLCleared returns if the "manga_serie_latest_url" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaSerieLatestURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaSerieLatestURL]
	return ok
}

// ResetMangaSerieLatestURL resets all changes to the "manga_serie_latest_url" field.
func (m *MovieSourceMutation) ResetMangaSerieLatestURL() {
	m.manga_serie_latest_url = nil
	delete(m.clearedFields, moviesource.FieldMangaSerieLatestURL)
}

// SetMangaFilmLatestURL sets the "manga_film_latest_url" field.
func (m *MovieSourceMutation) SetMangaFilmLatestURL(s string) {
	m.manga_film_latest_url = &s
}

// MangaFilmLatestURL returns the value of the "manga_film_latest_url" field in the mutation.
func (m *MovieSourceMutation) MangaFilmLatestURL() (r string, exists bool) {
	v := m.manga_film_latest_url
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaFilmLatestURL returns the old "manga_film_latest_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaFilmLatestURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaFilmLatestURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaFilmLatestURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaFilmLatestURL: %w", err)
	}
	return oldValue.MangaFilmLatestURL, nil
}

// ClearMangaFilmLatestURL clears the value of the "manga_film_latest_url" field.
func (m *MovieSourceMutation) ClearMangaFilmLatestURL() {
	m.manga_film_latest_url = nil
	m.clearedFields[moviesource.FieldMangaFilmLatestURL] = struct{}{}
}

// MangaFilmLatestURLCleared returns if the "manga_film_latest_url" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaFilmLatestURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaFilmLatestURL]
	return ok
}

// ResetMangaFilmLatestURL resets all changes to the "manga_film_latest_url" field.
func (m *MovieSourceMutation) ResetMangaFilmLatestURL() {
	m.manga_film_latest_url = nil
	delete(m.clearedFields, moviesource.FieldMangaFilmLatestURL)
}

// SetSerieLatestURL sets the "serie_latest_url" field.
func (m *MovieSourceMutation) SetSerieLatestURL(s string) {
	m.serie_latest_url = &s
}

// SerieLatestURL returns the value of the "serie_latest_url" field in the mutation.
func (m *MovieSourceMutation) SerieLatestURL() (r string, exists bool) {
	v := m.serie_latest_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSerieLatestURL returns the old "serie_latest_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldSerieLatestURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerieLatestURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerieLatestURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerieLatestURL: %w", err)
	}
	return oldValue.SerieLatestURL, nil
}

// ClearSerieLatestURL clears the value of the "serie_latest_url" field.
func (m *MovieSourceMutation) ClearSerieLatestURL() {
	m.serie_latest_url = nil
	m.clearedFields[moviesource.FieldSerieLatestURL] = struct{}{}
}

// SerieLatestURLCleared returns if the "serie_latest_url" field was cleared in this mutation.
func (m *MovieSourceMutation) SerieLatestURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldSerieLatestURL]
	return ok
}

// ResetSerieLatestURL resets all changes to the "serie_latest_url" field.
func (m *MovieSourceMutation) ResetSerieLatestURL() {
	m.serie_latest_url = nil
	delete(m.clearedFields, moviesource.FieldSerieLatestURL)
}

// SetFilmLatestURL sets the "film_latest_url" field.
func (m *MovieSourceMutation) SetFilmLatestURL(s string) {
	m.film_latest_url = &s
}

// FilmLatestURL returns the value of the "film_latest_url" field in the mutation.
func (m *MovieSourceMutation) FilmLatestURL() (r string, exists bool) {
	v := m.film_latest_url
	if v == nil {
		return
	}
	return *v, true
}

// OldFilmLatestURL returns the old "film_latest_url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldFilmLatestURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilmLatestURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilmLatestURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilmLatestURL: %w", err)
	}
	return oldValue.FilmLatestURL, nil
}

// ClearFilmLatestURL clears the value of the "film_latest_url" field.
func (m *MovieSourceMutation) ClearFilmLatestURL() {
	m.film_latest_url = nil
	m.clearedFields[moviesource.FieldFilmLatestURL] = struct{}{}
}

// FilmLatestURLCleared returns if the "film_latest_url" field was cleared in this mutation.
func (m *MovieSourceMutation) FilmLatestURLCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldFilmLatestURL]
	return ok
}

// ResetFilmLatestURL resets all changes to the "film_latest_url" field.
func (m *MovieSourceMutation) ResetFilmLatestURL() {
	m.film_latest_url = nil
	delete(m.clearedFields, moviesource.FieldFilmLatestURL)
}

// SetMangaSerieLatestPostSelector sets the "manga_serie_latest_post_selector" field.
func (m *MovieSourceMutation) SetMangaSerieLatestPostSelector(sps *schema.MoviePostSelector) {
	m.manga_serie_latest_post_selector = &sps
}

// MangaSerieLatestPostSelector returns the value of the "manga_serie_latest_post_selector" field in the mutation.
func (m *MovieSourceMutation) MangaSerieLatestPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.manga_serie_latest_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaSerieLatestPostSelector returns the old "manga_serie_latest_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaSerieLatestPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaSerieLatestPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaSerieLatestPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaSerieLatestPostSelector: %w", err)
	}
	return oldValue.MangaSerieLatestPostSelector, nil
}

// ClearMangaSerieLatestPostSelector clears the value of the "manga_serie_latest_post_selector" field.
func (m *MovieSourceMutation) ClearMangaSerieLatestPostSelector() {
	m.manga_serie_latest_post_selector = nil
	m.clearedFields[moviesource.FieldMangaSerieLatestPostSelector] = struct{}{}
}

// MangaSerieLatestPostSelectorCleared returns if the "manga_serie_latest_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaSerieLatestPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaSerieLatestPostSelector]
	return ok
}

// ResetMangaSerieLatestPostSelector resets all changes to the "manga_serie_latest_post_selector" field.
func (m *MovieSourceMutation) ResetMangaSerieLatestPostSelector() {
	m.manga_serie_latest_post_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaSerieLatestPostSelector)
}

// SetMangaFilmLatestPostSelector sets the "manga_film_latest_post_selector" field.
func (m *MovieSourceMutation) SetMangaFilmLatestPostSelector(sps *schema.MoviePostSelector) {
	m.manga_film_latest_post_selector = &sps
}

// MangaFilmLatestPostSelector returns the value of the "manga_film_latest_post_selector" field in the mutation.
func (m *MovieSourceMutation) MangaFilmLatestPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.manga_film_latest_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaFilmLatestPostSelector returns the old "manga_film_latest_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaFilmLatestPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaFilmLatestPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaFilmLatestPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaFilmLatestPostSelector: %w", err)
	}
	return oldValue.MangaFilmLatestPostSelector, nil
}

// ClearMangaFilmLatestPostSelector clears the value of the "manga_film_latest_post_selector" field.
func (m *MovieSourceMutation) ClearMangaFilmLatestPostSelector() {
	m.manga_film_latest_post_selector = nil
	m.clearedFields[moviesource.FieldMangaFilmLatestPostSelector] = struct{}{}
}

// MangaFilmLatestPostSelectorCleared returns if the "manga_film_latest_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaFilmLatestPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaFilmLatestPostSelector]
	return ok
}

// ResetMangaFilmLatestPostSelector resets all changes to the "manga_film_latest_post_selector" field.
func (m *MovieSourceMutation) ResetMangaFilmLatestPostSelector() {
	m.manga_film_latest_post_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaFilmLatestPostSelector)
}

// SetSerieLatestPostSelector sets the "serie_latest_post_selector" field.
func (m *MovieSourceMutation) SetSerieLatestPostSelector(sps *schema.MoviePostSelector) {
	m.serie_latest_post_selector = &sps
}

// SerieLatestPostSelector returns the value of the "serie_latest_post_selector" field in the mutation.
func (m *MovieSourceMutation) SerieLatestPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.serie_latest_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldSerieLatestPostSelector returns the old "serie_latest_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldSerieLatestPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerieLatestPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerieLatestPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerieLatestPostSelector: %w", err)
	}
	return oldValue.SerieLatestPostSelector, nil
}

// ClearSerieLatestPostSelector clears the value of the "serie_latest_post_selector" field.
func (m *MovieSourceMutation) ClearSerieLatestPostSelector() {
	m.serie_latest_post_selector = nil
	m.clearedFields[moviesource.FieldSerieLatestPostSelector] = struct{}{}
}

// SerieLatestPostSelectorCleared returns if the "serie_latest_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) SerieLatestPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldSerieLatestPostSelector]
	return ok
}

// ResetSerieLatestPostSelector resets all changes to the "serie_latest_post_selector" field.
func (m *MovieSourceMutation) ResetSerieLatestPostSelector() {
	m.serie_latest_post_selector = nil
	delete(m.clearedFields, moviesource.FieldSerieLatestPostSelector)
}

// SetFilmLatestPostSelector sets the "film_latest_post_selector" field.
func (m *MovieSourceMutation) SetFilmLatestPostSelector(sps *schema.MoviePostSelector) {
	m.film_latest_post_selector = &sps
}

// FilmLatestPostSelector returns the value of the "film_latest_post_selector" field in the mutation.
func (m *MovieSourceMutation) FilmLatestPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.film_latest_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldFilmLatestPostSelector returns the old "film_latest_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldFilmLatestPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilmLatestPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilmLatestPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilmLatestPostSelector: %w", err)
	}
	return oldValue.FilmLatestPostSelector, nil
}

// ClearFilmLatestPostSelector clears the value of the "film_latest_post_selector" field.
func (m *MovieSourceMutation) ClearFilmLatestPostSelector() {
	m.film_latest_post_selector = nil
	m.clearedFields[moviesource.FieldFilmLatestPostSelector] = struct{}{}
}

// FilmLatestPostSelectorCleared returns if the "film_latest_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) FilmLatestPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldFilmLatestPostSelector]
	return ok
}

// ResetFilmLatestPostSelector resets all changes to the "film_latest_post_selector" field.
func (m *MovieSourceMutation) ResetFilmLatestPostSelector() {
	m.film_latest_post_selector = nil
	delete(m.clearedFields, moviesource.FieldFilmLatestPostSelector)
}

// SetMangaSerieSearchPostSelector sets the "manga_serie_search_post_selector" field.
func (m *MovieSourceMutation) SetMangaSerieSearchPostSelector(sps *schema.MoviePostSelector) {
	m.manga_serie_search_post_selector = &sps
}

// MangaSerieSearchPostSelector returns the value of the "manga_serie_search_post_selector" field in the mutation.
func (m *MovieSourceMutation) MangaSerieSearchPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.manga_serie_search_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaSerieSearchPostSelector returns the old "manga_serie_search_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaSerieSearchPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaSerieSearchPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaSerieSearchPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaSerieSearchPostSelector: %w", err)
	}
	return oldValue.MangaSerieSearchPostSelector, nil
}

// ClearMangaSerieSearchPostSelector clears the value of the "manga_serie_search_post_selector" field.
func (m *MovieSourceMutation) ClearMangaSerieSearchPostSelector() {
	m.manga_serie_search_post_selector = nil
	m.clearedFields[moviesource.FieldMangaSerieSearchPostSelector] = struct{}{}
}

// MangaSerieSearchPostSelectorCleared returns if the "manga_serie_search_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaSerieSearchPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaSerieSearchPostSelector]
	return ok
}

// ResetMangaSerieSearchPostSelector resets all changes to the "manga_serie_search_post_selector" field.
func (m *MovieSourceMutation) ResetMangaSerieSearchPostSelector() {
	m.manga_serie_search_post_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaSerieSearchPostSelector)
}

// SetMangaFilmSearchPostSelector sets the "manga_film_search_post_selector" field.
func (m *MovieSourceMutation) SetMangaFilmSearchPostSelector(sps *schema.MoviePostSelector) {
	m.manga_film_search_post_selector = &sps
}

// MangaFilmSearchPostSelector returns the value of the "manga_film_search_post_selector" field in the mutation.
func (m *MovieSourceMutation) MangaFilmSearchPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.manga_film_search_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaFilmSearchPostSelector returns the old "manga_film_search_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaFilmSearchPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaFilmSearchPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaFilmSearchPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaFilmSearchPostSelector: %w", err)
	}
	return oldValue.MangaFilmSearchPostSelector, nil
}

// ClearMangaFilmSearchPostSelector clears the value of the "manga_film_search_post_selector" field.
func (m *MovieSourceMutation) ClearMangaFilmSearchPostSelector() {
	m.manga_film_search_post_selector = nil
	m.clearedFields[moviesource.FieldMangaFilmSearchPostSelector] = struct{}{}
}

// MangaFilmSearchPostSelectorCleared returns if the "manga_film_search_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaFilmSearchPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaFilmSearchPostSelector]
	return ok
}

// ResetMangaFilmSearchPostSelector resets all changes to the "manga_film_search_post_selector" field.
func (m *MovieSourceMutation) ResetMangaFilmSearchPostSelector() {
	m.manga_film_search_post_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaFilmSearchPostSelector)
}

// SetSerieSearchPostSelector sets the "serie_search_post_selector" field.
func (m *MovieSourceMutation) SetSerieSearchPostSelector(sps *schema.MoviePostSelector) {
	m.serie_search_post_selector = &sps
}

// SerieSearchPostSelector returns the value of the "serie_search_post_selector" field in the mutation.
func (m *MovieSourceMutation) SerieSearchPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.serie_search_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldSerieSearchPostSelector returns the old "serie_search_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldSerieSearchPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerieSearchPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerieSearchPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerieSearchPostSelector: %w", err)
	}
	return oldValue.SerieSearchPostSelector, nil
}

// ClearSerieSearchPostSelector clears the value of the "serie_search_post_selector" field.
func (m *MovieSourceMutation) ClearSerieSearchPostSelector() {
	m.serie_search_post_selector = nil
	m.clearedFields[moviesource.FieldSerieSearchPostSelector] = struct{}{}
}

// SerieSearchPostSelectorCleared returns if the "serie_search_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) SerieSearchPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldSerieSearchPostSelector]
	return ok
}

// ResetSerieSearchPostSelector resets all changes to the "serie_search_post_selector" field.
func (m *MovieSourceMutation) ResetSerieSearchPostSelector() {
	m.serie_search_post_selector = nil
	delete(m.clearedFields, moviesource.FieldSerieSearchPostSelector)
}

// SetFilmSearchPostSelector sets the "film_search_post_selector" field.
func (m *MovieSourceMutation) SetFilmSearchPostSelector(sps *schema.MoviePostSelector) {
	m.film_search_post_selector = &sps
}

// FilmSearchPostSelector returns the value of the "film_search_post_selector" field in the mutation.
func (m *MovieSourceMutation) FilmSearchPostSelector() (r *schema.MoviePostSelector, exists bool) {
	v := m.film_search_post_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldFilmSearchPostSelector returns the old "film_search_post_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldFilmSearchPostSelector(ctx context.Context) (v *schema.MoviePostSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilmSearchPostSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilmSearchPostSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilmSearchPostSelector: %w", err)
	}
	return oldValue.FilmSearchPostSelector, nil
}

// ClearFilmSearchPostSelector clears the value of the "film_search_post_selector" field.
func (m *MovieSourceMutation) ClearFilmSearchPostSelector() {
	m.film_search_post_selector = nil
	m.clearedFields[moviesource.FieldFilmSearchPostSelector] = struct{}{}
}

// FilmSearchPostSelectorCleared returns if the "film_search_post_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) FilmSearchPostSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldFilmSearchPostSelector]
	return ok
}

// ResetFilmSearchPostSelector resets all changes to the "film_search_post_selector" field.
func (m *MovieSourceMutation) ResetFilmSearchPostSelector() {
	m.film_search_post_selector = nil
	delete(m.clearedFields, moviesource.FieldFilmSearchPostSelector)
}

// SetMangaSerieArticleSelector sets the "manga_serie_article_selector" field.
func (m *MovieSourceMutation) SetMangaSerieArticleSelector(sas *schema.MovieArticleSelector) {
	m.manga_serie_article_selector = &sas
}

// MangaSerieArticleSelector returns the value of the "manga_serie_article_selector" field in the mutation.
func (m *MovieSourceMutation) MangaSerieArticleSelector() (r *schema.MovieArticleSelector, exists bool) {
	v := m.manga_serie_article_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaSerieArticleSelector returns the old "manga_serie_article_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaSerieArticleSelector(ctx context.Context) (v *schema.MovieArticleSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaSerieArticleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaSerieArticleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaSerieArticleSelector: %w", err)
	}
	return oldValue.MangaSerieArticleSelector, nil
}

// ClearMangaSerieArticleSelector clears the value of the "manga_serie_article_selector" field.
func (m *MovieSourceMutation) ClearMangaSerieArticleSelector() {
	m.manga_serie_article_selector = nil
	m.clearedFields[moviesource.FieldMangaSerieArticleSelector] = struct{}{}
}

// MangaSerieArticleSelectorCleared returns if the "manga_serie_article_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaSerieArticleSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaSerieArticleSelector]
	return ok
}

// ResetMangaSerieArticleSelector resets all changes to the "manga_serie_article_selector" field.
func (m *MovieSourceMutation) ResetMangaSerieArticleSelector() {
	m.manga_serie_article_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaSerieArticleSelector)
}

// SetMangaFilmArticleSelector sets the "manga_film_article_selector" field.
func (m *MovieSourceMutation) SetMangaFilmArticleSelector(sas *schema.MovieArticleSelector) {
	m.manga_film_article_selector = &sas
}

// MangaFilmArticleSelector returns the value of the "manga_film_article_selector" field in the mutation.
func (m *MovieSourceMutation) MangaFilmArticleSelector() (r *schema.MovieArticleSelector, exists bool) {
	v := m.manga_film_article_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldMangaFilmArticleSelector returns the old "manga_film_article_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldMangaFilmArticleSelector(ctx context.Context) (v *schema.MovieArticleSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMangaFilmArticleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMangaFilmArticleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMangaFilmArticleSelector: %w", err)
	}
	return oldValue.MangaFilmArticleSelector, nil
}

// ClearMangaFilmArticleSelector clears the value of the "manga_film_article_selector" field.
func (m *MovieSourceMutation) ClearMangaFilmArticleSelector() {
	m.manga_film_article_selector = nil
	m.clearedFields[moviesource.FieldMangaFilmArticleSelector] = struct{}{}
}

// MangaFilmArticleSelectorCleared returns if the "manga_film_article_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) MangaFilmArticleSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldMangaFilmArticleSelector]
	return ok
}

// ResetMangaFilmArticleSelector resets all changes to the "manga_film_article_selector" field.
func (m *MovieSourceMutation) ResetMangaFilmArticleSelector() {
	m.manga_film_article_selector = nil
	delete(m.clearedFields, moviesource.FieldMangaFilmArticleSelector)
}

// SetSerieArticleSelector sets the "serie_article_selector" field.
func (m *MovieSourceMutation) SetSerieArticleSelector(sas *schema.MovieArticleSelector) {
	m.serie_article_selector = &sas
}

// SerieArticleSelector returns the value of the "serie_article_selector" field in the mutation.
func (m *MovieSourceMutation) SerieArticleSelector() (r *schema.MovieArticleSelector, exists bool) {
	v := m.serie_article_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldSerieArticleSelector returns the old "serie_article_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldSerieArticleSelector(ctx context.Context) (v *schema.MovieArticleSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSerieArticleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSerieArticleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerieArticleSelector: %w", err)
	}
	return oldValue.SerieArticleSelector, nil
}

// ClearSerieArticleSelector clears the value of the "serie_article_selector" field.
func (m *MovieSourceMutation) ClearSerieArticleSelector() {
	m.serie_article_selector = nil
	m.clearedFields[moviesource.FieldSerieArticleSelector] = struct{}{}
}

// SerieArticleSelectorCleared returns if the "serie_article_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) SerieArticleSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldSerieArticleSelector]
	return ok
}

// ResetSerieArticleSelector resets all changes to the "serie_article_selector" field.
func (m *MovieSourceMutation) ResetSerieArticleSelector() {
	m.serie_article_selector = nil
	delete(m.clearedFields, moviesource.FieldSerieArticleSelector)
}

// SetFilmArticleSelector sets the "film_article_selector" field.
func (m *MovieSourceMutation) SetFilmArticleSelector(sas *schema.MovieArticleSelector) {
	m.film_article_selector = &sas
}

// FilmArticleSelector returns the value of the "film_article_selector" field in the mutation.
func (m *MovieSourceMutation) FilmArticleSelector() (r *schema.MovieArticleSelector, exists bool) {
	v := m.film_article_selector
	if v == nil {
		return
	}
	return *v, true
}

// OldFilmArticleSelector returns the old "film_article_selector" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldFilmArticleSelector(ctx context.Context) (v *schema.MovieArticleSelector, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFilmArticleSelector is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFilmArticleSelector requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFilmArticleSelector: %w", err)
	}
	return oldValue.FilmArticleSelector, nil
}

// ClearFilmArticleSelector clears the value of the "film_article_selector" field.
func (m *MovieSourceMutation) ClearFilmArticleSelector() {
	m.film_article_selector = nil
	m.clearedFields[moviesource.FieldFilmArticleSelector] = struct{}{}
}

// FilmArticleSelectorCleared returns if the "film_article_selector" field was cleared in this mutation.
func (m *MovieSourceMutation) FilmArticleSelectorCleared() bool {
	_, ok := m.clearedFields[moviesource.FieldFilmArticleSelector]
	return ok
}

// ResetFilmArticleSelector resets all changes to the "film_article_selector" field.
func (m *MovieSourceMutation) ResetFilmArticleSelector() {
	m.film_article_selector = nil
	delete(m.clearedFields, moviesource.FieldFilmArticleSelector)
}

// SetLanguage sets the "language" field.
func (m *MovieSourceMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *MovieSourceMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *MovieSourceMutation) ResetLanguage() {
	m.language = nil
}

// SetStatus sets the "status" field.
func (m *MovieSourceMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *MovieSourceMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *MovieSourceMutation) ResetStatus() {
	m.status = nil
}

// SetName sets the "name" field.
func (m *MovieSourceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MovieSourceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MovieSourceMutation) ResetName() {
	m.name = nil
}

// SetURL sets the "url" field.
func (m *MovieSourceMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *MovieSourceMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the MovieSource entity.
// If the MovieSource object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieSourceMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *MovieSourceMutation) ResetURL() {
	m.url = nil
}

// Where appends a list predicates to the MovieSourceMutation builder.
func (m *MovieSourceMutation) Where(ps ...predicate.MovieSource) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MovieSourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MovieSource).
func (m *MovieSourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieSourceMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.manga_serie_search_url != nil {
		fields = append(fields, moviesource.FieldMangaSerieSearchURL)
	}
	if m.manga_film_search_url != nil {
		fields = append(fields, moviesource.FieldMangaFilmSearchURL)
	}
	if m.serie_search_url != nil {
		fields = append(fields, moviesource.FieldSerieSearchURL)
	}
	if m.film_search_url != nil {
		fields = append(fields, moviesource.FieldFilmSearchURL)
	}
	if m.manga_serie_latest_url != nil {
		fields = append(fields, moviesource.FieldMangaSerieLatestURL)
	}
	if m.manga_film_latest_url != nil {
		fields = append(fields, moviesource.FieldMangaFilmLatestURL)
	}
	if m.serie_latest_url != nil {
		fields = append(fields, moviesource.FieldSerieLatestURL)
	}
	if m.film_latest_url != nil {
		fields = append(fields, moviesource.FieldFilmLatestURL)
	}
	if m.manga_serie_latest_post_selector != nil {
		fields = append(fields, moviesource.FieldMangaSerieLatestPostSelector)
	}
	if m.manga_film_latest_post_selector != nil {
		fields = append(fields, moviesource.FieldMangaFilmLatestPostSelector)
	}
	if m.serie_latest_post_selector != nil {
		fields = append(fields, moviesource.FieldSerieLatestPostSelector)
	}
	if m.film_latest_post_selector != nil {
		fields = append(fields, moviesource.FieldFilmLatestPostSelector)
	}
	if m.manga_serie_search_post_selector != nil {
		fields = append(fields, moviesource.FieldMangaSerieSearchPostSelector)
	}
	if m.manga_film_search_post_selector != nil {
		fields = append(fields, moviesource.FieldMangaFilmSearchPostSelector)
	}
	if m.serie_search_post_selector != nil {
		fields = append(fields, moviesource.FieldSerieSearchPostSelector)
	}
	if m.film_search_post_selector != nil {
		fields = append(fields, moviesource.FieldFilmSearchPostSelector)
	}
	if m.manga_serie_article_selector != nil {
		fields = append(fields, moviesource.FieldMangaSerieArticleSelector)
	}
	if m.manga_film_article_selector != nil {
		fields = append(fields, moviesource.FieldMangaFilmArticleSelector)
	}
	if m.serie_article_selector != nil {
		fields = append(fields, moviesource.FieldSerieArticleSelector)
	}
	if m.film_article_selector != nil {
		fields = append(fields, moviesource.FieldFilmArticleSelector)
	}
	if m.language != nil {
		fields = append(fields, moviesource.FieldLanguage)
	}
	if m.status != nil {
		fields = append(fields, moviesource.FieldStatus)
	}
	if m.name != nil {
		fields = append(fields, moviesource.FieldName)
	}
	if m.url != nil {
		fields = append(fields, moviesource.FieldURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieSourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case moviesource.FieldMangaSerieSearchURL:
		return m.MangaSerieSearchURL()
	case moviesource.FieldMangaFilmSearchURL:
		return m.MangaFilmSearchURL()
	case moviesource.FieldSerieSearchURL:
		return m.SerieSearchURL()
	case moviesource.FieldFilmSearchURL:
		return m.FilmSearchURL()
	case moviesource.FieldMangaSerieLatestURL:
		return m.MangaSerieLatestURL()
	case moviesource.FieldMangaFilmLatestURL:
		return m.MangaFilmLatestURL()
	case moviesource.FieldSerieLatestURL:
		return m.SerieLatestURL()
	case moviesource.FieldFilmLatestURL:
		return m.FilmLatestURL()
	case moviesource.FieldMangaSerieLatestPostSelector:
		return m.MangaSerieLatestPostSelector()
	case moviesource.FieldMangaFilmLatestPostSelector:
		return m.MangaFilmLatestPostSelector()
	case moviesource.FieldSerieLatestPostSelector:
		return m.SerieLatestPostSelector()
	case moviesource.FieldFilmLatestPostSelector:
		return m.FilmLatestPostSelector()
	case moviesource.FieldMangaSerieSearchPostSelector:
		return m.MangaSerieSearchPostSelector()
	case moviesource.FieldMangaFilmSearchPostSelector:
		return m.MangaFilmSearchPostSelector()
	case moviesource.FieldSerieSearchPostSelector:
		return m.SerieSearchPostSelector()
	case moviesource.FieldFilmSearchPostSelector:
		return m.FilmSearchPostSelector()
	case moviesource.FieldMangaSerieArticleSelector:
		return m.MangaSerieArticleSelector()
	case moviesource.FieldMangaFilmArticleSelector:
		return m.MangaFilmArticleSelector()
	case moviesource.FieldSerieArticleSelector:
		return m.SerieArticleSelector()
	case moviesource.FieldFilmArticleSelector:
		return m.FilmArticleSelector()
	case moviesource.FieldLanguage:
		return m.Language()
	case moviesource.FieldStatus:
		return m.Status()
	case moviesource.FieldName:
		return m.Name()
	case moviesource.FieldURL:
		return m.URL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieSourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case moviesource.FieldMangaSerieSearchURL:
		return m.OldMangaSerieSearchURL(ctx)
	case moviesource.FieldMangaFilmSearchURL:
		return m.OldMangaFilmSearchURL(ctx)
	case moviesource.FieldSerieSearchURL:
		return m.OldSerieSearchURL(ctx)
	case moviesource.FieldFilmSearchURL:
		return m.OldFilmSearchURL(ctx)
	case moviesource.FieldMangaSerieLatestURL:
		return m.OldMangaSerieLatestURL(ctx)
	case moviesource.FieldMangaFilmLatestURL:
		return m.OldMangaFilmLatestURL(ctx)
	case moviesource.FieldSerieLatestURL:
		return m.OldSerieLatestURL(ctx)
	case moviesource.FieldFilmLatestURL:
		return m.OldFilmLatestURL(ctx)
	case moviesource.FieldMangaSerieLatestPostSelector:
		return m.OldMangaSerieLatestPostSelector(ctx)
	case moviesource.FieldMangaFilmLatestPostSelector:
		return m.OldMangaFilmLatestPostSelector(ctx)
	case moviesource.FieldSerieLatestPostSelector:
		return m.OldSerieLatestPostSelector(ctx)
	case moviesource.FieldFilmLatestPostSelector:
		return m.OldFilmLatestPostSelector(ctx)
	case moviesource.FieldMangaSerieSearchPostSelector:
		return m.OldMangaSerieSearchPostSelector(ctx)
	case moviesource.FieldMangaFilmSearchPostSelector:
		return m.OldMangaFilmSearchPostSelector(ctx)
	case moviesource.FieldSerieSearchPostSelector:
		return m.OldSerieSearchPostSelector(ctx)
	case moviesource.FieldFilmSearchPostSelector:
		return m.OldFilmSearchPostSelector(ctx)
	case moviesource.FieldMangaSerieArticleSelector:
		return m.OldMangaSerieArticleSelector(ctx)
	case moviesource.FieldMangaFilmArticleSelector:
		return m.OldMangaFilmArticleSelector(ctx)
	case moviesource.FieldSerieArticleSelector:
		return m.OldSerieArticleSelector(ctx)
	case moviesource.FieldFilmArticleSelector:
		return m.OldFilmArticleSelector(ctx)
	case moviesource.FieldLanguage:
		return m.OldLanguage(ctx)
	case moviesource.FieldStatus:
		return m.OldStatus(ctx)
	case moviesource.FieldName:
		return m.OldName(ctx)
	case moviesource.FieldURL:
		return m.OldURL(ctx)
	}
	return nil, fmt.Errorf("unknown MovieSource field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieSourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case moviesource.FieldMangaSerieSearchURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaSerieSearchURL(v)
		return nil
	case moviesource.FieldMangaFilmSearchURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaFilmSearchURL(v)
		return nil
	case moviesource.FieldSerieSearchURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerieSearchURL(v)
		return nil
	case moviesource.FieldFilmSearchURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilmSearchURL(v)
		return nil
	case moviesource.FieldMangaSerieLatestURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaSerieLatestURL(v)
		return nil
	case moviesource.FieldMangaFilmLatestURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaFilmLatestURL(v)
		return nil
	case moviesource.FieldSerieLatestURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerieLatestURL(v)
		return nil
	case moviesource.FieldFilmLatestURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilmLatestURL(v)
		return nil
	case moviesource.FieldMangaSerieLatestPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaSerieLatestPostSelector(v)
		return nil
	case moviesource.FieldMangaFilmLatestPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaFilmLatestPostSelector(v)
		return nil
	case moviesource.FieldSerieLatestPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerieLatestPostSelector(v)
		return nil
	case moviesource.FieldFilmLatestPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilmLatestPostSelector(v)
		return nil
	case moviesource.FieldMangaSerieSearchPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaSerieSearchPostSelector(v)
		return nil
	case moviesource.FieldMangaFilmSearchPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaFilmSearchPostSelector(v)
		return nil
	case moviesource.FieldSerieSearchPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerieSearchPostSelector(v)
		return nil
	case moviesource.FieldFilmSearchPostSelector:
		v, ok := value.(*schema.MoviePostSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilmSearchPostSelector(v)
		return nil
	case moviesource.FieldMangaSerieArticleSelector:
		v, ok := value.(*schema.MovieArticleSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaSerieArticleSelector(v)
		return nil
	case moviesource.FieldMangaFilmArticleSelector:
		v, ok := value.(*schema.MovieArticleSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMangaFilmArticleSelector(v)
		return nil
	case moviesource.FieldSerieArticleSelector:
		v, ok := value.(*schema.MovieArticleSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerieArticleSelector(v)
		return nil
	case moviesource.FieldFilmArticleSelector:
		v, ok := value.(*schema.MovieArticleSelector)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFilmArticleSelector(v)
		return nil
	case moviesource.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	case moviesource.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case moviesource.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case moviesource.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	}
	return fmt.Errorf("unknown MovieSource field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieSourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieSourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieSourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MovieSource numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieSourceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(moviesource.FieldMangaSerieSearchURL) {
		fields = append(fields, moviesource.FieldMangaSerieSearchURL)
	}
	if m.FieldCleared(moviesource.FieldMangaFilmSearchURL) {
		fields = append(fields, moviesource.FieldMangaFilmSearchURL)
	}
	if m.FieldCleared(moviesource.FieldSerieSearchURL) {
		fields = append(fields, moviesource.FieldSerieSearchURL)
	}
	if m.FieldCleared(moviesource.FieldFilmSearchURL) {
		fields = append(fields, moviesource.FieldFilmSearchURL)
	}
	if m.FieldCleared(moviesource.FieldMangaSerieLatestURL) {
		fields = append(fields, moviesource.FieldMangaSerieLatestURL)
	}
	if m.FieldCleared(moviesource.FieldMangaFilmLatestURL) {
		fields = append(fields, moviesource.FieldMangaFilmLatestURL)
	}
	if m.FieldCleared(moviesource.FieldSerieLatestURL) {
		fields = append(fields, moviesource.FieldSerieLatestURL)
	}
	if m.FieldCleared(moviesource.FieldFilmLatestURL) {
		fields = append(fields, moviesource.FieldFilmLatestURL)
	}
	if m.FieldCleared(moviesource.FieldMangaSerieLatestPostSelector) {
		fields = append(fields, moviesource.FieldMangaSerieLatestPostSelector)
	}
	if m.FieldCleared(moviesource.FieldMangaFilmLatestPostSelector) {
		fields = append(fields, moviesource.FieldMangaFilmLatestPostSelector)
	}
	if m.FieldCleared(moviesource.FieldSerieLatestPostSelector) {
		fields = append(fields, moviesource.FieldSerieLatestPostSelector)
	}
	if m.FieldCleared(moviesource.FieldFilmLatestPostSelector) {
		fields = append(fields, moviesource.FieldFilmLatestPostSelector)
	}
	if m.FieldCleared(moviesource.FieldMangaSerieSearchPostSelector) {
		fields = append(fields, moviesource.FieldMangaSerieSearchPostSelector)
	}
	if m.FieldCleared(moviesource.FieldMangaFilmSearchPostSelector) {
		fields = append(fields, moviesource.FieldMangaFilmSearchPostSelector)
	}
	if m.FieldCleared(moviesource.FieldSerieSearchPostSelector) {
		fields = append(fields, moviesource.FieldSerieSearchPostSelector)
	}
	if m.FieldCleared(moviesource.FieldFilmSearchPostSelector) {
		fields = append(fields, moviesource.FieldFilmSearchPostSelector)
	}
	if m.FieldCleared(moviesource.FieldMangaSerieArticleSelector) {
		fields = append(fields, moviesource.FieldMangaSerieArticleSelector)
	}
	if m.FieldCleared(moviesource.FieldMangaFilmArticleSelector) {
		fields = append(fields, moviesource.FieldMangaFilmArticleSelector)
	}
	if m.FieldCleared(moviesource.FieldSerieArticleSelector) {
		fields = append(fields, moviesource.FieldSerieArticleSelector)
	}
	if m.FieldCleared(moviesource.FieldFilmArticleSelector) {
		fields = append(fields, moviesource.FieldFilmArticleSelector)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieSourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieSourceMutation) ClearField(name string) error {
	switch name {
	case moviesource.FieldMangaSerieSearchURL:
		m.ClearMangaSerieSearchURL()
		return nil
	case moviesource.FieldMangaFilmSearchURL:
		m.ClearMangaFilmSearchURL()
		return nil
	case moviesource.FieldSerieSearchURL:
		m.ClearSerieSearchURL()
		return nil
	case moviesource.FieldFilmSearchURL:
		m.ClearFilmSearchURL()
		return nil
	case moviesource.FieldMangaSerieLatestURL:
		m.ClearMangaSerieLatestURL()
		return nil
	case moviesource.FieldMangaFilmLatestURL:
		m.ClearMangaFilmLatestURL()
		return nil
	case moviesource.FieldSerieLatestURL:
		m.ClearSerieLatestURL()
		return nil
	case moviesource.FieldFilmLatestURL:
		m.ClearFilmLatestURL()
		return nil
	case moviesource.FieldMangaSerieLatestPostSelector:
		m.ClearMangaSerieLatestPostSelector()
		return nil
	case moviesource.FieldMangaFilmLatestPostSelector:
		m.ClearMangaFilmLatestPostSelector()
		return nil
	case moviesource.FieldSerieLatestPostSelector:
		m.ClearSerieLatestPostSelector()
		return nil
	case moviesource.FieldFilmLatestPostSelector:
		m.ClearFilmLatestPostSelector()
		return nil
	case moviesource.FieldMangaSerieSearchPostSelector:
		m.ClearMangaSerieSearchPostSelector()
		return nil
	case moviesource.FieldMangaFilmSearchPostSelector:
		m.ClearMangaFilmSearchPostSelector()
		return nil
	case moviesource.FieldSerieSearchPostSelector:
		m.ClearSerieSearchPostSelector()
		return nil
	case moviesource.FieldFilmSearchPostSelector:
		m.ClearFilmSearchPostSelector()
		return nil
	case moviesource.FieldMangaSerieArticleSelector:
		m.ClearMangaSerieArticleSelector()
		return nil
	case moviesource.FieldMangaFilmArticleSelector:
		m.ClearMangaFilmArticleSelector()
		return nil
	case moviesource.FieldSerieArticleSelector:
		m.ClearSerieArticleSelector()
		return nil
	case moviesource.FieldFilmArticleSelector:
		m.ClearFilmArticleSelector()
		return nil
	}
	return fmt.Errorf("unknown MovieSource nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieSourceMutation) ResetField(name string) error {
	switch name {
	case moviesource.FieldMangaSerieSearchURL:
		m.ResetMangaSerieSearchURL()
		return nil
	case moviesource.FieldMangaFilmSearchURL:
		m.ResetMangaFilmSearchURL()
		return nil
	case moviesource.FieldSerieSearchURL:
		m.ResetSerieSearchURL()
		return nil
	case moviesource.FieldFilmSearchURL:
		m.ResetFilmSearchURL()
		return nil
	case moviesource.FieldMangaSerieLatestURL:
		m.ResetMangaSerieLatestURL()
		return nil
	case moviesource.FieldMangaFilmLatestURL:
		m.ResetMangaFilmLatestURL()
		return nil
	case moviesource.FieldSerieLatestURL:
		m.ResetSerieLatestURL()
		return nil
	case moviesource.FieldFilmLatestURL:
		m.ResetFilmLatestURL()
		return nil
	case moviesource.FieldMangaSerieLatestPostSelector:
		m.ResetMangaSerieLatestPostSelector()
		return nil
	case moviesource.FieldMangaFilmLatestPostSelector:
		m.ResetMangaFilmLatestPostSelector()
		return nil
	case moviesource.FieldSerieLatestPostSelector:
		m.ResetSerieLatestPostSelector()
		return nil
	case moviesource.FieldFilmLatestPostSelector:
		m.ResetFilmLatestPostSelector()
		return nil
	case moviesource.FieldMangaSerieSearchPostSelector:
		m.ResetMangaSerieSearchPostSelector()
		return nil
	case moviesource.FieldMangaFilmSearchPostSelector:
		m.ResetMangaFilmSearchPostSelector()
		return nil
	case moviesource.FieldSerieSearchPostSelector:
		m.ResetSerieSearchPostSelector()
		return nil
	case moviesource.FieldFilmSearchPostSelector:
		m.ResetFilmSearchPostSelector()
		return nil
	case moviesource.FieldMangaSerieArticleSelector:
		m.ResetMangaSerieArticleSelector()
		return nil
	case moviesource.FieldMangaFilmArticleSelector:
		m.ResetMangaFilmArticleSelector()
		return nil
	case moviesource.FieldSerieArticleSelector:
		m.ResetSerieArticleSelector()
		return nil
	case moviesource.FieldFilmArticleSelector:
		m.ResetFilmArticleSelector()
		return nil
	case moviesource.FieldLanguage:
		m.ResetLanguage()
		return nil
	case moviesource.FieldStatus:
		m.ResetStatus()
		return nil
	case moviesource.FieldName:
		m.ResetName()
		return nil
	case moviesource.FieldURL:
		m.ResetURL()
		return nil
	}
	return fmt.Errorf("unknown MovieSource field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieSourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieSourceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieSourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieSourceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieSourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieSourceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieSourceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MovieSource unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieSourceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown MovieSource edge %s", name)
}

// TvMutation represents an operation that mutates the Tv nodes in the graph.
type TvMutation struct {
	config
	op            Op
	typ           string
	id            *int
	logo          *string
	video         *string
	title         *string
	status        *bool
	country       *string
	description   *string
	language      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Tv, error)
	predicates    []predicate.Tv
}

var _ ent.Mutation = (*TvMutation)(nil)

// tvOption allows management of the mutation configuration using functional options.
type tvOption func(*TvMutation)

// newTvMutation creates new mutation for the Tv entity.
func newTvMutation(c config, op Op, opts ...tvOption) *TvMutation {
	m := &TvMutation{
		config:        c,
		op:            op,
		typ:           TypeTv,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTvID sets the ID field of the mutation.
func withTvID(id int) tvOption {
	return func(m *TvMutation) {
		var (
			err   error
			once  sync.Once
			value *Tv
		)
		m.oldValue = func(ctx context.Context) (*Tv, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Tv.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTv sets the old Tv of the mutation.
func withTv(node *Tv) tvOption {
	return func(m *TvMutation) {
		m.oldValue = func(context.Context) (*Tv, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TvMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TvMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("entdata: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TvMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TvMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Tv.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLogo sets the "logo" field.
func (m *TvMutation) SetLogo(s string) {
	m.logo = &s
}

// Logo returns the value of the "logo" field in the mutation.
func (m *TvMutation) Logo() (r string, exists bool) {
	v := m.logo
	if v == nil {
		return
	}
	return *v, true
}

// OldLogo returns the old "logo" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldLogo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogo: %w", err)
	}
	return oldValue.Logo, nil
}

// ResetLogo resets all changes to the "logo" field.
func (m *TvMutation) ResetLogo() {
	m.logo = nil
}

// SetVideo sets the "video" field.
func (m *TvMutation) SetVideo(s string) {
	m.video = &s
}

// Video returns the value of the "video" field in the mutation.
func (m *TvMutation) Video() (r string, exists bool) {
	v := m.video
	if v == nil {
		return
	}
	return *v, true
}

// OldVideo returns the old "video" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldVideo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideo: %w", err)
	}
	return oldValue.Video, nil
}

// ResetVideo resets all changes to the "video" field.
func (m *TvMutation) ResetVideo() {
	m.video = nil
}

// SetTitle sets the "title" field.
func (m *TvMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *TvMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *TvMutation) ResetTitle() {
	m.title = nil
}

// SetStatus sets the "status" field.
func (m *TvMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the value of the "status" field in the mutation.
func (m *TvMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *TvMutation) ResetStatus() {
	m.status = nil
}

// SetCountry sets the "country" field.
func (m *TvMutation) SetCountry(s string) {
	m.country = &s
}

// Country returns the value of the "country" field in the mutation.
func (m *TvMutation) Country() (r string, exists bool) {
	v := m.country
	if v == nil {
		return
	}
	return *v, true
}

// OldCountry returns the old "country" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldCountry(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountry: %w", err)
	}
	return oldValue.Country, nil
}

// ResetCountry resets all changes to the "country" field.
func (m *TvMutation) ResetCountry() {
	m.country = nil
}

// SetDescription sets the "description" field.
func (m *TvMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TvMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TvMutation) ResetDescription() {
	m.description = nil
}

// SetLanguage sets the "language" field.
func (m *TvMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *TvMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the Tv entity.
// If the Tv object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TvMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *TvMutation) ResetLanguage() {
	m.language = nil
}

// Where appends a list predicates to the TvMutation builder.
func (m *TvMutation) Where(ps ...predicate.Tv) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TvMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Tv).
func (m *TvMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TvMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.logo != nil {
		fields = append(fields, tv.FieldLogo)
	}
	if m.video != nil {
		fields = append(fields, tv.FieldVideo)
	}
	if m.title != nil {
		fields = append(fields, tv.FieldTitle)
	}
	if m.status != nil {
		fields = append(fields, tv.FieldStatus)
	}
	if m.country != nil {
		fields = append(fields, tv.FieldCountry)
	}
	if m.description != nil {
		fields = append(fields, tv.FieldDescription)
	}
	if m.language != nil {
		fields = append(fields, tv.FieldLanguage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TvMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case tv.FieldLogo:
		return m.Logo()
	case tv.FieldVideo:
		return m.Video()
	case tv.FieldTitle:
		return m.Title()
	case tv.FieldStatus:
		return m.Status()
	case tv.FieldCountry:
		return m.Country()
	case tv.FieldDescription:
		return m.Description()
	case tv.FieldLanguage:
		return m.Language()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TvMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case tv.FieldLogo:
		return m.OldLogo(ctx)
	case tv.FieldVideo:
		return m.OldVideo(ctx)
	case tv.FieldTitle:
		return m.OldTitle(ctx)
	case tv.FieldStatus:
		return m.OldStatus(ctx)
	case tv.FieldCountry:
		return m.OldCountry(ctx)
	case tv.FieldDescription:
		return m.OldDescription(ctx)
	case tv.FieldLanguage:
		return m.OldLanguage(ctx)
	}
	return nil, fmt.Errorf("unknown Tv field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TvMutation) SetField(name string, value ent.Value) error {
	switch name {
	case tv.FieldLogo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogo(v)
		return nil
	case tv.FieldVideo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideo(v)
		return nil
	case tv.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case tv.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case tv.FieldCountry:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountry(v)
		return nil
	case tv.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case tv.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	}
	return fmt.Errorf("unknown Tv field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TvMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TvMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TvMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Tv numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TvMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TvMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TvMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Tv nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TvMutation) ResetField(name string) error {
	switch name {
	case tv.FieldLogo:
		m.ResetLogo()
		return nil
	case tv.FieldVideo:
		m.ResetVideo()
		return nil
	case tv.FieldTitle:
		m.ResetTitle()
		return nil
	case tv.FieldStatus:
		m.ResetStatus()
		return nil
	case tv.FieldCountry:
		m.ResetCountry()
		return nil
	case tv.FieldDescription:
		m.ResetDescription()
		return nil
	case tv.FieldLanguage:
		m.ResetLanguage()
		return nil
	}
	return fmt.Errorf("unknown Tv field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TvMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TvMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TvMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TvMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TvMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TvMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TvMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Tv unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TvMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Tv edge %s", name)
}
