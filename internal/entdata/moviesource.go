// Code generated by entc, DO NOT EDIT.

package entdata

import (
	"encoding/json"
	"fmt"
	"strings"
	"yola/internal/entdata/moviesource"
	"yola/internal/entdata/schema"

	"entgo.io/ent/dialect/sql"
)

// MovieSource is the model entity for the MovieSource schema.
type MovieSource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MangaSerieSearchURL holds the value of the "manga_serie_search_url" field.
	MangaSerieSearchURL *string `json:"manga_serie_search_url,omitempty"`
	// MangaFilmSearchURL holds the value of the "manga_film_search_url" field.
	MangaFilmSearchURL *string `json:"manga_film_search_url,omitempty"`
	// SerieSearchURL holds the value of the "serie_search_url" field.
	SerieSearchURL *string `json:"serie_search_url,omitempty"`
	// FilmSearchURL holds the value of the "film_search_url" field.
	FilmSearchURL *string `json:"film_search_url,omitempty"`
	// MangaSerieLatestURL holds the value of the "manga_serie_latest_url" field.
	MangaSerieLatestURL *string `json:"manga_serie_latest_url,omitempty"`
	// MangaFilmLatestURL holds the value of the "manga_film_latest_url" field.
	MangaFilmLatestURL *string `json:"manga_film_latest_url,omitempty"`
	// SerieLatestURL holds the value of the "serie_latest_url" field.
	SerieLatestURL *string `json:"serie_latest_url,omitempty"`
	// FilmLatestURL holds the value of the "film_latest_url" field.
	FilmLatestURL *string `json:"film_latest_url,omitempty"`
	// MangaSerieLatestPostSelector holds the value of the "manga_serie_latest_post_selector" field.
	MangaSerieLatestPostSelector *schema.MoviePostSelector `json:"manga_serie_latest_post_selector,omitempty"`
	// MangaFilmLatestPostSelector holds the value of the "manga_film_latest_post_selector" field.
	MangaFilmLatestPostSelector *schema.MoviePostSelector `json:"manga_film_latest_post_selector,omitempty"`
	// SerieLatestPostSelector holds the value of the "serie_latest_post_selector" field.
	SerieLatestPostSelector *schema.MoviePostSelector `json:"serie_latest_post_selector,omitempty"`
	// FilmLatestPostSelector holds the value of the "film_latest_post_selector" field.
	FilmLatestPostSelector *schema.MoviePostSelector `json:"film_latest_post_selector,omitempty"`
	// MangaSerieSearchPostSelector holds the value of the "manga_serie_search_post_selector" field.
	MangaSerieSearchPostSelector *schema.MoviePostSelector `json:"manga_serie_search_post_selector,omitempty"`
	// MangaFilmSearchPostSelector holds the value of the "manga_film_search_post_selector" field.
	MangaFilmSearchPostSelector *schema.MoviePostSelector `json:"manga_film_search_post_selector,omitempty"`
	// SerieSearchPostSelector holds the value of the "serie_search_post_selector" field.
	SerieSearchPostSelector *schema.MoviePostSelector `json:"serie_search_post_selector,omitempty"`
	// FilmSearchPostSelector holds the value of the "film_search_post_selector" field.
	FilmSearchPostSelector *schema.MoviePostSelector `json:"film_search_post_selector,omitempty"`
	// MangaSerieArticleSelector holds the value of the "manga_serie_article_selector" field.
	MangaSerieArticleSelector *schema.MovieArticleSelector `json:"manga_serie_article_selector,omitempty"`
	// MangaFilmArticleSelector holds the value of the "manga_film_article_selector" field.
	MangaFilmArticleSelector *schema.MovieArticleSelector `json:"manga_film_article_selector,omitempty"`
	// SerieArticleSelector holds the value of the "serie_article_selector" field.
	SerieArticleSelector *schema.MovieArticleSelector `json:"serie_article_selector,omitempty"`
	// FilmArticleSelector holds the value of the "film_article_selector" field.
	FilmArticleSelector *schema.MovieArticleSelector `json:"film_article_selector,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MovieSource) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case moviesource.FieldMangaSerieLatestPostSelector, moviesource.FieldMangaFilmLatestPostSelector, moviesource.FieldSerieLatestPostSelector, moviesource.FieldFilmLatestPostSelector, moviesource.FieldMangaSerieSearchPostSelector, moviesource.FieldMangaFilmSearchPostSelector, moviesource.FieldSerieSearchPostSelector, moviesource.FieldFilmSearchPostSelector, moviesource.FieldMangaSerieArticleSelector, moviesource.FieldMangaFilmArticleSelector, moviesource.FieldSerieArticleSelector, moviesource.FieldFilmArticleSelector:
			values[i] = new([]byte)
		case moviesource.FieldStatus:
			values[i] = new(sql.NullBool)
		case moviesource.FieldID:
			values[i] = new(sql.NullInt64)
		case moviesource.FieldMangaSerieSearchURL, moviesource.FieldMangaFilmSearchURL, moviesource.FieldSerieSearchURL, moviesource.FieldFilmSearchURL, moviesource.FieldMangaSerieLatestURL, moviesource.FieldMangaFilmLatestURL, moviesource.FieldSerieLatestURL, moviesource.FieldFilmLatestURL, moviesource.FieldName, moviesource.FieldURL:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type MovieSource", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MovieSource fields.
func (ms *MovieSource) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case moviesource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case moviesource.FieldMangaSerieSearchURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manga_serie_search_url", values[i])
			} else if value.Valid {
				ms.MangaSerieSearchURL = new(string)
				*ms.MangaSerieSearchURL = value.String
			}
		case moviesource.FieldMangaFilmSearchURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manga_film_search_url", values[i])
			} else if value.Valid {
				ms.MangaFilmSearchURL = new(string)
				*ms.MangaFilmSearchURL = value.String
			}
		case moviesource.FieldSerieSearchURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serie_search_url", values[i])
			} else if value.Valid {
				ms.SerieSearchURL = new(string)
				*ms.SerieSearchURL = value.String
			}
		case moviesource.FieldFilmSearchURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field film_search_url", values[i])
			} else if value.Valid {
				ms.FilmSearchURL = new(string)
				*ms.FilmSearchURL = value.String
			}
		case moviesource.FieldMangaSerieLatestURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manga_serie_latest_url", values[i])
			} else if value.Valid {
				ms.MangaSerieLatestURL = new(string)
				*ms.MangaSerieLatestURL = value.String
			}
		case moviesource.FieldMangaFilmLatestURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field manga_film_latest_url", values[i])
			} else if value.Valid {
				ms.MangaFilmLatestURL = new(string)
				*ms.MangaFilmLatestURL = value.String
			}
		case moviesource.FieldSerieLatestURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serie_latest_url", values[i])
			} else if value.Valid {
				ms.SerieLatestURL = new(string)
				*ms.SerieLatestURL = value.String
			}
		case moviesource.FieldFilmLatestURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field film_latest_url", values[i])
			} else if value.Valid {
				ms.FilmLatestURL = new(string)
				*ms.FilmLatestURL = value.String
			}
		case moviesource.FieldMangaSerieLatestPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_serie_latest_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaSerieLatestPostSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_serie_latest_post_selector: %w", err)
				}
			}
		case moviesource.FieldMangaFilmLatestPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_film_latest_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaFilmLatestPostSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_film_latest_post_selector: %w", err)
				}
			}
		case moviesource.FieldSerieLatestPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field serie_latest_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.SerieLatestPostSelector); err != nil {
					return fmt.Errorf("unmarshal field serie_latest_post_selector: %w", err)
				}
			}
		case moviesource.FieldFilmLatestPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field film_latest_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.FilmLatestPostSelector); err != nil {
					return fmt.Errorf("unmarshal field film_latest_post_selector: %w", err)
				}
			}
		case moviesource.FieldMangaSerieSearchPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_serie_search_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaSerieSearchPostSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_serie_search_post_selector: %w", err)
				}
			}
		case moviesource.FieldMangaFilmSearchPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_film_search_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaFilmSearchPostSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_film_search_post_selector: %w", err)
				}
			}
		case moviesource.FieldSerieSearchPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field serie_search_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.SerieSearchPostSelector); err != nil {
					return fmt.Errorf("unmarshal field serie_search_post_selector: %w", err)
				}
			}
		case moviesource.FieldFilmSearchPostSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field film_search_post_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.FilmSearchPostSelector); err != nil {
					return fmt.Errorf("unmarshal field film_search_post_selector: %w", err)
				}
			}
		case moviesource.FieldMangaSerieArticleSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_serie_article_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaSerieArticleSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_serie_article_selector: %w", err)
				}
			}
		case moviesource.FieldMangaFilmArticleSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field manga_film_article_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.MangaFilmArticleSelector); err != nil {
					return fmt.Errorf("unmarshal field manga_film_article_selector: %w", err)
				}
			}
		case moviesource.FieldSerieArticleSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field serie_article_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.SerieArticleSelector); err != nil {
					return fmt.Errorf("unmarshal field serie_article_selector: %w", err)
				}
			}
		case moviesource.FieldFilmArticleSelector:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field film_article_selector", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ms.FilmArticleSelector); err != nil {
					return fmt.Errorf("unmarshal field film_article_selector: %w", err)
				}
			}
		case moviesource.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ms.Status = value.Bool
			}
		case moviesource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ms.Name = value.String
			}
		case moviesource.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ms.URL = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this MovieSource.
// Note that you need to call MovieSource.Unwrap() before calling this method if this MovieSource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MovieSource) Update() *MovieSourceUpdateOne {
	return (&MovieSourceClient{config: ms.config}).UpdateOne(ms)
}

// Unwrap unwraps the MovieSource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MovieSource) Unwrap() *MovieSource {
	tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("entdata: MovieSource is not a transactional entity")
	}
	ms.config.driver = tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MovieSource) String() string {
	var builder strings.Builder
	builder.WriteString("MovieSource(")
	builder.WriteString(fmt.Sprintf("id=%v", ms.ID))
	if v := ms.MangaSerieSearchURL; v != nil {
		builder.WriteString(", manga_serie_search_url=")
		builder.WriteString(*v)
	}
	if v := ms.MangaFilmSearchURL; v != nil {
		builder.WriteString(", manga_film_search_url=")
		builder.WriteString(*v)
	}
	if v := ms.SerieSearchURL; v != nil {
		builder.WriteString(", serie_search_url=")
		builder.WriteString(*v)
	}
	if v := ms.FilmSearchURL; v != nil {
		builder.WriteString(", film_search_url=")
		builder.WriteString(*v)
	}
	if v := ms.MangaSerieLatestURL; v != nil {
		builder.WriteString(", manga_serie_latest_url=")
		builder.WriteString(*v)
	}
	if v := ms.MangaFilmLatestURL; v != nil {
		builder.WriteString(", manga_film_latest_url=")
		builder.WriteString(*v)
	}
	if v := ms.SerieLatestURL; v != nil {
		builder.WriteString(", serie_latest_url=")
		builder.WriteString(*v)
	}
	if v := ms.FilmLatestURL; v != nil {
		builder.WriteString(", film_latest_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", manga_serie_latest_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaSerieLatestPostSelector))
	builder.WriteString(", manga_film_latest_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaFilmLatestPostSelector))
	builder.WriteString(", serie_latest_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.SerieLatestPostSelector))
	builder.WriteString(", film_latest_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.FilmLatestPostSelector))
	builder.WriteString(", manga_serie_search_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaSerieSearchPostSelector))
	builder.WriteString(", manga_film_search_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaFilmSearchPostSelector))
	builder.WriteString(", serie_search_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.SerieSearchPostSelector))
	builder.WriteString(", film_search_post_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.FilmSearchPostSelector))
	builder.WriteString(", manga_serie_article_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaSerieArticleSelector))
	builder.WriteString(", manga_film_article_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.MangaFilmArticleSelector))
	builder.WriteString(", serie_article_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.SerieArticleSelector))
	builder.WriteString(", film_article_selector=")
	builder.WriteString(fmt.Sprintf("%v", ms.FilmArticleSelector))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", ms.Status))
	builder.WriteString(", name=")
	builder.WriteString(ms.Name)
	builder.WriteString(", url=")
	builder.WriteString(ms.URL)
	builder.WriteByte(')')
	return builder.String()
}

// MovieSources is a parsable slice of MovieSource.
type MovieSources []*MovieSource

func (ms MovieSources) config(cfg config) {
	for _i := range ms {
		ms[_i].config = cfg
	}
}
