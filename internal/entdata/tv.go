// Code generated by entc, DO NOT EDIT.

package entdata

import (
	"fmt"
	"strings"
	"yola/internal/entdata/tv"

	"entgo.io/ent/dialect/sql"
)

// Tv is the model entity for the Tv schema.
type Tv struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Logo holds the value of the "logo" field.
	Logo string `json:"logo,omitempty"`
	// Video holds the value of the "video" field.
	Video string `json:"video,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// Country holds the value of the "country" field.
	Country string `json:"country,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tv) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case tv.FieldStatus:
			values[i] = new(sql.NullBool)
		case tv.FieldID:
			values[i] = new(sql.NullInt64)
		case tv.FieldLogo, tv.FieldVideo, tv.FieldTitle, tv.FieldCountry, tv.FieldDescription, tv.FieldLanguage:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tv", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tv fields.
func (t *Tv) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tv.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tv.FieldLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo", values[i])
			} else if value.Valid {
				t.Logo = value.String
			}
		case tv.FieldVideo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video", values[i])
			} else if value.Valid {
				t.Video = value.String
			}
		case tv.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case tv.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = value.Bool
			}
		case tv.FieldCountry:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field country", values[i])
			} else if value.Valid {
				t.Country = value.String
			}
		case tv.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case tv.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				t.Language = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Tv.
// Note that you need to call Tv.Unwrap() before calling this method if this Tv
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tv) Update() *TvUpdateOne {
	return (&TvClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tv entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tv) Unwrap() *Tv {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("entdata: Tv is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tv) String() string {
	var builder strings.Builder
	builder.WriteString("Tv(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", logo=")
	builder.WriteString(t.Logo)
	builder.WriteString(", video=")
	builder.WriteString(t.Video)
	builder.WriteString(", title=")
	builder.WriteString(t.Title)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", country=")
	builder.WriteString(t.Country)
	builder.WriteString(", description=")
	builder.WriteString(t.Description)
	builder.WriteString(", language=")
	builder.WriteString(t.Language)
	builder.WriteByte(')')
	return builder.String()
}

// Tvs is a parsable slice of Tv.
type Tvs []*Tv

func (t Tvs) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
