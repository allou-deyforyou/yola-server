// Code generated by entc, DO NOT EDIT.

package entdata

import (
	"context"
	"errors"
	"fmt"
	"yola/internal/entdata/predicate"
	"yola/internal/entdata/tv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TvUpdate is the builder for updating Tv entities.
type TvUpdate struct {
	config
	hooks    []Hook
	mutation *TvMutation
}

// Where appends a list predicates to the TvUpdate builder.
func (tu *TvUpdate) Where(ps ...predicate.Tv) *TvUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetLogo sets the "logo" field.
func (tu *TvUpdate) SetLogo(s string) *TvUpdate {
	tu.mutation.SetLogo(s)
	return tu
}

// SetVideo sets the "video" field.
func (tu *TvUpdate) SetVideo(s string) *TvUpdate {
	tu.mutation.SetVideo(s)
	return tu
}

// SetTitle sets the "title" field.
func (tu *TvUpdate) SetTitle(s string) *TvUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetStatus sets the "status" field.
func (tu *TvUpdate) SetStatus(b bool) *TvUpdate {
	tu.mutation.SetStatus(b)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *TvUpdate) SetNillableStatus(b *bool) *TvUpdate {
	if b != nil {
		tu.SetStatus(*b)
	}
	return tu
}

// SetCountry sets the "country" field.
func (tu *TvUpdate) SetCountry(s string) *TvUpdate {
	tu.mutation.SetCountry(s)
	return tu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tu *TvUpdate) SetNillableCountry(s *string) *TvUpdate {
	if s != nil {
		tu.SetCountry(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TvUpdate) SetDescription(s string) *TvUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetLanguage sets the "language" field.
func (tu *TvUpdate) SetLanguage(s string) *TvUpdate {
	tu.mutation.SetLanguage(s)
	return tu
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tu *TvUpdate) SetNillableLanguage(s *string) *TvUpdate {
	if s != nil {
		tu.SetLanguage(*s)
	}
	return tu
}

// Mutation returns the TvMutation object of the builder.
func (tu *TvUpdate) Mutation() *TvMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TvUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("entdata: uninitialized hook (forgotten import entdata/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TvUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TvUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TvUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TvUpdate) check() error {
	if v, ok := tu.mutation.Logo(); ok {
		if err := tv.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`entdata: validator failed for field "Tv.logo": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Video(); ok {
		if err := tv.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`entdata: validator failed for field "Tv.video": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Title(); ok {
		if err := tv.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`entdata: validator failed for field "Tv.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Description(); ok {
		if err := tv.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`entdata: validator failed for field "Tv.description": %w`, err)}
		}
	}
	return nil
}

func (tu *TvUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tv.Table,
			Columns: tv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tv.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldLogo,
		})
	}
	if value, ok := tu.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldVideo,
		})
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldTitle,
		})
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tv.FieldStatus,
		})
	}
	if value, ok := tu.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldCountry,
		})
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldDescription,
		})
	}
	if value, ok := tu.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldLanguage,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TvUpdateOne is the builder for updating a single Tv entity.
type TvUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TvMutation
}

// SetLogo sets the "logo" field.
func (tuo *TvUpdateOne) SetLogo(s string) *TvUpdateOne {
	tuo.mutation.SetLogo(s)
	return tuo
}

// SetVideo sets the "video" field.
func (tuo *TvUpdateOne) SetVideo(s string) *TvUpdateOne {
	tuo.mutation.SetVideo(s)
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *TvUpdateOne) SetTitle(s string) *TvUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *TvUpdateOne) SetStatus(b bool) *TvUpdateOne {
	tuo.mutation.SetStatus(b)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *TvUpdateOne) SetNillableStatus(b *bool) *TvUpdateOne {
	if b != nil {
		tuo.SetStatus(*b)
	}
	return tuo
}

// SetCountry sets the "country" field.
func (tuo *TvUpdateOne) SetCountry(s string) *TvUpdateOne {
	tuo.mutation.SetCountry(s)
	return tuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (tuo *TvUpdateOne) SetNillableCountry(s *string) *TvUpdateOne {
	if s != nil {
		tuo.SetCountry(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TvUpdateOne) SetDescription(s string) *TvUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetLanguage sets the "language" field.
func (tuo *TvUpdateOne) SetLanguage(s string) *TvUpdateOne {
	tuo.mutation.SetLanguage(s)
	return tuo
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (tuo *TvUpdateOne) SetNillableLanguage(s *string) *TvUpdateOne {
	if s != nil {
		tuo.SetLanguage(*s)
	}
	return tuo
}

// Mutation returns the TvMutation object of the builder.
func (tuo *TvUpdateOne) Mutation() *TvMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TvUpdateOne) Select(field string, fields ...string) *TvUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tv entity.
func (tuo *TvUpdateOne) Save(ctx context.Context) (*Tv, error) {
	var (
		err  error
		node *Tv
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TvMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("entdata: uninitialized hook (forgotten import entdata/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TvUpdateOne) SaveX(ctx context.Context) *Tv {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TvUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TvUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TvUpdateOne) check() error {
	if v, ok := tuo.mutation.Logo(); ok {
		if err := tv.LogoValidator(v); err != nil {
			return &ValidationError{Name: "logo", err: fmt.Errorf(`entdata: validator failed for field "Tv.logo": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Video(); ok {
		if err := tv.VideoValidator(v); err != nil {
			return &ValidationError{Name: "video", err: fmt.Errorf(`entdata: validator failed for field "Tv.video": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Title(); ok {
		if err := tv.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`entdata: validator failed for field "Tv.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Description(); ok {
		if err := tv.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`entdata: validator failed for field "Tv.description": %w`, err)}
		}
	}
	return nil
}

func (tuo *TvUpdateOne) sqlSave(ctx context.Context) (_node *Tv, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tv.Table,
			Columns: tv.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tv.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`entdata: missing "Tv.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tv.FieldID)
		for _, f := range fields {
			if !tv.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("entdata: invalid field %q for query", f)}
			}
			if f != tv.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Logo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldLogo,
		})
	}
	if value, ok := tuo.mutation.Video(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldVideo,
		})
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldTitle,
		})
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: tv.FieldStatus,
		})
	}
	if value, ok := tuo.mutation.Country(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldCountry,
		})
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldDescription,
		})
	}
	if value, ok := tuo.mutation.Language(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: tv.FieldLanguage,
		})
	}
	_node = &Tv{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tv.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
